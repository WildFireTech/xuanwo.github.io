<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Xuanwo's Blog]]></title>
  <subtitle><![CDATA[A Long Way to Go]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://xuanwo.github.io//"/>
  <updated>2014-07-16T09:11:17.393Z</updated>
  <id>https://xuanwo.github.io//</id>
  
  <author>
    <name><![CDATA[Xuanwo]]></name>
    <email><![CDATA[vars.cn@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[POJ 1014 Dividing]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-1014-Dividing/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-1014-Dividing/</id>
    <published>2014-07-16T15:25:02.000Z</published>
    <updated>2014-07-16T07:36:03.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1014" target="_blank" rel="external">http://poj.org/problem?id=1014</a></p>
<h1 id="理解">理解</h1>
<p>我的思路非常直接，直接当成一道数学题来解。于是把所有的数都mod2，得到了一个二进制串，然后以这个为基础，开始寻找特例，结果挂的很惨。比如<code>0 3 2 0 0 0</code>，这种情况是在mod2的时候直接就舍去的。说明我这种方法本质上有着缺陷。网上的大牛们大多采用了多重背包的方法，但是有一个人在discuss中提出了mod60的方法。实际上，这个是mod2思路的进一步延伸，也就是解决了<code>0 3 2 0 0 0</code>这种类型的特例。然后再不断的用sum去减，判断最后能都减至0，实质上是用了DFS。<br><a id="more"></a></p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[<span class="number">6</span>] = {<span class="number">0</span>};</div><div class="line"><span class="keyword">int</span> value[<span class="number">6</span>] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</div><div class="line"><span class="keyword">int</span> mod[<span class="number">6</span>] = {<span class="number">60</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">10</span>};</div><div class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> cp[<span class="number">6</span>] = {<span class="number">0</span>};</div><div class="line"></div><div class="line"><span class="keyword">int</span> divide(<span class="keyword">int</span> a)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (cp[i] && a &gt;= value[i])</div><div class="line">        {</div><div class="line">            cp[i]--;</div><div class="line">            <span class="keyword">if</span> (divide(a - value[i]) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            cp[i]++;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</div><div class="line">        {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &num[i]);</div><div class="line">            num[i] = num[i] % mod[i];</div><div class="line">            sum += value[i] * num[i];</div><div class="line">            cp[i] = num[i];</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span> (!sum) <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Collection #%d:\n"</span>, ++t);</div><div class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Can't be divided.\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            sum = sum / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (divide(sum)) <span class="built_in">printf</span>(<span class="string">"Can be divided.\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Can't be divided.\n"</span>);</div><div class="line">        }</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月16日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1014" target="_blank" rel="external">http://poj.org/problem?id=1014</a></p>
<h1 id="理解">理解</h1>
<p>我的思路非常直接，直接当成一道数学题来解。于是把所有的数都mod2，得到了一个二进制串，然后以这个为基础，开始寻找特例，结果挂的很惨。比如<code>0 3 2 0 0 0</code>，这种情况是在mod2的时候直接就舍去的。说明我这种方法本质上有着缺陷。网上的大牛们大多采用了多重背包的方法，但是有一个人在discuss中提出了mod60的方法。实际上，这个是mod2思路的进一步延伸，也就是解决了<code>0 3 2 0 0 0</code>这种类型的特例。然后再不断的用sum去减，判断最后能都减至0，实质上是用了DFS。<br>]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1012 Joseph]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-1012-Joseph/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-1012-Joseph/</id>
    <published>2014-07-16T14:22:30.000Z</published>
    <updated>2014-07-16T06:25:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1012" target="_blank" rel="external">http://poj.org/problem?id=1012</a></p>
<h1 id="理解">理解</h1>
<p>用模拟的方法貌似会超时。直接打了一个表，求出0到14之间每一种k的值对应的m值，再根据输入输出就OK。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> r[<span class="number">14</span>];</div><div class="line"><span class="keyword">int</span> i, j, k;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> solve(<span class="keyword">int</span> k, <span class="keyword">int</span> i)</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> n = k * <span class="number">2</span>, m = i, x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n &gt; k)</div><div class="line">    {</div><div class="line">        x = (x + m - <span class="number">1</span>) % n;</div><div class="line">        <span class="keyword">if</span> (x &lt; k) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        n--;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; <span class="number">14</span>; k++)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span> (i = k + <span class="number">1</span>;; i += k + <span class="number">1</span>)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (solve(k, i))</div><div class="line">            {</div><div class="line">                r[k] = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (solve(k, i + <span class="number">1</span>))</div><div class="line">            {</div><div class="line">                r[k] = i + <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; k, k)</div><div class="line">    {</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; r[k] &lt;&lt; endl;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月16日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1012" target="_blank" rel="external">http://poj.org/problem?id=1012</a></p>
<h1 id="理解">理解</h1>
<p>用模拟的方法貌似会超时。直接打了一个表，求出0到14之间每一种k的值对应的m值，再根据输入输出就OK。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="简单计算" scheme="https://xuanwo.github.io/tags/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97/"/>
    
      <category term="打表" scheme="https://xuanwo.github.io/tags/%E6%89%93%E8%A1%A8/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1011 木棒]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-1011-Sticks/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-1011-Sticks/</id>
    <published>2014-07-16T12:20:44.000Z</published>
    <updated>2014-07-16T04:20:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1011" target="_blank" rel="external">http://poj.org/problem?id=1011</a></p>
<h1 id="理解">理解</h1>
<p>一开始的想法比较简单，单纯的求和然后找出最短的那根。但是这样的做法有下面的一些问题：第一，最后的棒子的和不能比最短的棒子还短；第二，最后的棒子必须是由给定的棒子合成的。因此只能使用搜索的方法，但是常规的搜索会超时，必须辅以有效的剪枝，以下是参考之后的代码。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sticks[<span class="number">64</span>], n, len, num, sum;</div><div class="line"><span class="keyword">bool</span> used[<span class="number">64</span>];</div><div class="line"><span class="keyword">bool</span> end;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> compare(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> a &gt; b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">bool</span> dfs(<span class="keyword">int</span> cur, <span class="keyword">int</span> left, <span class="keyword">int</span> level)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (left == <span class="number">0</span>)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (level == num - <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (cur = <span class="number">0</span>; used[cur]; cur++);</div><div class="line">        used[cur] = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (dfs(cur + <span class="number">1</span>, len - sticks[cur], level + <span class="number">1</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        used[cur] = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span></div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (cur &gt;= n - <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur; i &lt; n; i++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (used[i])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> ((sticks[i] == sticks[i - <span class="number">1</span>]) && !used[i - <span class="number">1</span>])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (sticks[i] &gt; left)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            used[i] = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (dfs(i, left - sticks[i], level))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            used[i] = <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &sticks[i]);</div><div class="line">            sum += sticks[i];</div><div class="line">        }</div><div class="line">        sort(sticks, sticks + n, compare);</div><div class="line">        end = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (len = sticks[<span class="number">0</span>]; len &lt;= sum / <span class="number">2</span>; len++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (sum % len == <span class="number">0</span>)</div><div class="line">            {</div><div class="line">                used[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">                num = sum / len;</div><div class="line">                <span class="keyword">if</span> (dfs(<span class="number">0</span>, len - sticks[<span class="number">0</span>], <span class="number">0</span>))</div><div class="line">                {</div><div class="line">                    end = <span class="keyword">true</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }</div><div class="line">                used[<span class="number">0</span>] = <span class="keyword">false</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span> (!end)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</div><div class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月16日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1011" target="_blank" rel="external">http://poj.org/problem?id=1011</a></p>
<h1 id="理解">理解</h1>
<p>一开始的想法比较简单，单纯的求和然后找出最短的那根。但是这样的做法有下面的一些问题：第一，最后的棒子的和不能比最短的棒子还短；第二，最后的棒子必须是由给定的棒子合成的。因此只能使用搜索的方法，但是常规的搜索会超时，必须辅以有效的剪枝，以下是参考之后的代码。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="剪枝" scheme="https://xuanwo.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1001 求高精度幂]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-1001-Big-Decimal/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-1001-Big-Decimal/</id>
    <published>2014-07-15T23:09:03.000Z</published>
    <updated>2014-07-15T15:53:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1001" target="_blank" rel="external">http://poj.org/problem?id=1001</a></p>
<h1 id="理解">理解</h1>
<p>搜索高精度计算的时候发现java自带了关于高精度处理的类，毫不客气的拿来用了～</p>
<a id="more"></a>

<h1 id="新技能get">新技能get</h1>
<p><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk_7u4" target="_blank" rel="external">Java高精度计算</a><br><code>BigDecimal r = cin.nextBigDecimal()</code>定义一个高精度类<br><code>stripTrailingZeros()</code>除去尾部多余的0<br><code>toPlainString()</code>转化为string类</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> {</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String args[])<span class="keyword">throws</span> Exception {</div><div class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (cin.hasNext()) {</div><div class="line">            BigDecimal r = cin.nextBigDecimal();</div><div class="line">            <span class="keyword">int</span> n = cin.nextInt();</div><div class="line">            r = r.pow(n).stripTrailingZeros();</div><div class="line">            String m_string = r.toPlainString();</div><div class="line">            <span class="keyword">if</span> (m_string.charAt(<span class="number">0</span>) == <span class="string">'0'</span>)</div><div class="line">                m_string = m_string.substring(<span class="number">1</span>);</div><div class="line">            System.out.println(m_string);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月15日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1001" target="_blank" rel="external">http://poj.org/problem?id=1001</a></p>
<h1 id="理解">理解</h1>
<p>搜索高精度计算的时候发现java自带了关于高精度处理的类，毫不客气的拿来用了～</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="Java" scheme="https://xuanwo.github.io/tags/Java/"/>
    
      <category term="高精度计算" scheme="https://xuanwo.github.io/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2800 Joseph's Problem]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-2800-Joseph's-Problem/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-2800-Joseph's-Problem/</id>
    <published>2014-07-15T20:41:42.000Z</published>
    <updated>2014-07-15T12:46:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2800" target="_blank" rel="external">http://poj.org/problem?id=2800</a></p>
<h1 id="理解">理解</h1>
<p>抱着侥幸心理使用了一般的方法来求，果然TLE了。然后开始计算∑1&lt;=i&lt;=n(k mod i)。由分析之，总共有三种情况，k<n，k=n，k>n。分别寻找规律并转化为等差数列简化运算。</n，k=n，k></p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;math.h&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> jos( <span class="keyword">long</span> <span class="keyword">long</span> n , <span class="keyword">long</span> <span class="keyword">long</span> k )</div><div class="line">{</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span> , a = ( <span class="keyword">long</span> <span class="keyword">long</span>  )  <span class="built_in">sqrt</span> ( k ), b = k / a , i ;</div><div class="line">    <span class="keyword">if</span> ( n &gt; k ) sum += ( n - k ) * k ;</div><div class="line">    <span class="keyword">for</span> ( i = a ; i &gt; <span class="number">1</span> ; i -- )</div><div class="line">    {</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> s = k / i , e = k / ( i - <span class="number">1</span> ) ;</div><div class="line">        <span class="keyword">if</span> ( s &gt; n ) <span class="keyword">break</span> ;</div><div class="line">        <span class="keyword">if</span> ( e &gt; n ) e = n ;</div><div class="line">        sum += ( k % e + k % ( s + <span class="number">1</span> ) ) * ( e - s ) / <span class="number">2</span> ;</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= n && i &lt;= b ; i ++ ) sum += k % i ;</div><div class="line">    <span class="keyword">return</span> sum ;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n , k ;</div><div class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span> ( <span class="string">"%I64d%I64d"</span>, &n, &k ) != EOF )</div><div class="line">        <span class="built_in">printf</span> ( <span class="string">"%I64d\n"</span> , jos(n, k) ) ;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月15日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2800" target="_blank" rel="external">http://poj.org/problem?id=2800</a></p>
<h1 id="理解">理解</h1>
<p>抱着侥幸心理使用了一般的方法来求，果然TLE了。然后开始计算∑1&lt;=i&lt;=n(k mod i)。由分析之，总共有三种情况，k<n，k=n，k>n。分别寻找规律并转化为等差数列简化运算。</n，k=n，k></p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="简单计算" scheme="https://xuanwo.github.io/tags/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2680 Computer Transformation]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-2680-Computer-Transformation/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-2680-Computer-Transformation/</id>
    <published>2014-07-15T19:28:08.000Z</published>
    <updated>2014-07-15T11:52:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=3048" target="_blank" rel="external">http://poj.org/problem?id=3048</a></p>
<h1 id="理解">理解</h1>
<p>数学规律并不难，很容易推出f[n]=f[n-1]+f[n-2]*2。但是2^1000次方，必须使用一定的手段来处理这个超大的数据。这里使用了一种比较简单的技巧，数组模拟。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dig[<span class="number">1010</span>][<span class="number">1010</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    dig[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    dig[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">1000</span>; i++)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++)</div><div class="line">        {</div><div class="line">            dig[i][j] += dig[i - <span class="number">2</span>][j] * <span class="number">2</span> + dig[i - <span class="number">1</span>][j];</div><div class="line">            <span class="keyword">if</span> (dig[i][j] &gt; <span class="number">9</span>)</div><div class="line">            {</div><div class="line">                dig[i][j + <span class="number">1</span>] = dig[i][j] / <span class="number">10</span>;</div><div class="line">                dig[i][j] %= <span class="number">10</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> ( n == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="keyword">bool</span> flag = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">999</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span> ( dig[n][i] && flag)</div><div class="line">                {</div><div class="line">                    flag = <span class="keyword">false</span>;</div><div class="line">                }</div><div class="line">                <span class="keyword">if</span> (!flag)</div><div class="line">                    <span class="built_in">cout</span> &lt;&lt; dig[n][i] ;</div><div class="line">            }</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; endl;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月15日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=3048" target="_blank" rel="external">http://poj.org/problem?id=3048</a></p>
<h1 id="理解">理解</h1>
<p>数学规律并不难，很容易推出f[n]=f[n-1]+f[n-2]*2。但是2^1000次方，必须使用一定的手段来处理这个超大的数据。这里使用了一种比较简单的技巧，数组模拟。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="大数据处理" scheme="https://xuanwo.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2818 Making Change]]></title>
    <link href="https://xuanwo.github.io/2014/07/16/POJ-2818-Making-Change/"/>
    <id>https://xuanwo.github.io/2014/07/16/POJ-2818-Making-Change/</id>
    <published>2014-07-15T16:50:50.000Z</published>
    <updated>2014-07-15T08:54:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2818" target="_blank" rel="external">http://poj.org/problem?id=2818</a></p>
<h1 id="理解">理解</h1>
<p>感觉很水的一道题，不知道为什么交题的人很少（吐槽一下坑爹的美元换算）。用DFS水掉了，分别从dispenser到pennies来算一遍就OK。我本以为用四个for也能过，但是discuss上面有人说过不了，TLE。有时间我试试看。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10000</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[<span class="number">4</span>], tmp[<span class="number">4</span>], result[<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> total, money;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> success;</div><div class="line"></div><div class="line"><span class="keyword">void</span> DFS(<span class="keyword">int</span> dep, <span class="keyword">int</span> remained)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (dep == <span class="number">4</span>)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (remained == <span class="number">0</span>)</div><div class="line">        {</div><div class="line">            <span class="keyword">int</span> sum = tmp[<span class="number">0</span>] + tmp[<span class="number">1</span>] + tmp[<span class="number">2</span>] + tmp[<span class="number">3</span>];</div><div class="line">            <span class="keyword">if</span> (sum &lt; total)</div><div class="line">            {</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">                    result[i] = tmp[i];</div><div class="line">                total = sum;</div><div class="line">            }</div><div class="line">            success = <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= num[dep]; j++)</div><div class="line">    {</div><div class="line">        tmp[dep] = j;</div><div class="line">        <span class="keyword">if</span> (dep == <span class="number">0</span>)</div><div class="line">            DFS(dep + <span class="number">1</span>, remained - <span class="number">25</span> * j);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dep == <span class="number">1</span>)</div><div class="line">            DFS(dep + <span class="number">1</span>, remained - <span class="number">10</span> * j);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dep == <span class="number">2</span>)</div><div class="line">            DFS(dep + <span class="number">1</span>, remained - <span class="number">5</span> * j);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dep == <span class="number">3</span>)</div><div class="line">            DFS(dep + <span class="number">1</span>, remained - j);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &num[<span class="number">0</span>], &num[<span class="number">1</span>], &num[<span class="number">2</span>], &num[<span class="number">3</span>], &money) && (num[<span class="number">0</span>] || num[<span class="number">1</span>] || num[<span class="number">2</span>] || num[<span class="number">3</span>] || money))</div><div class="line">    {</div><div class="line">        total = INF;</div><div class="line">        success = <span class="keyword">false</span>;</div><div class="line">        DFS(<span class="number">0</span>, money);</div><div class="line">        <span class="keyword">if</span> (success)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Dispense %d quarters, %d dimes, %d nickels, and %d pennies.\n"</span>, result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>], result[<span class="number">3</span>]);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Cannot dispense the desired amount.\n"</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月15日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2818" target="_blank" rel="external">http://poj.org/problem?id=2818</a></p>
<h1 id="理解">理解</h1>
<p>感觉很水的一道题，不知道为什么交题的人很少（吐槽一下坑爹的美元换算）。用DFS水掉了，分别从dispenser到pennies来算一遍就OK。我本以为用四个for也能过，但是discuss上面有人说过不了，TLE。有时间我试试看。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2714 Random Walk]]></title>
    <link href="https://xuanwo.github.io/2014/07/15/POJ-2714-Random-Walk/"/>
    <id>https://xuanwo.github.io/2014/07/15/POJ-2714-Random-Walk/</id>
    <published>2014-07-15T15:55:21.000Z</published>
    <updated>2014-07-15T08:04:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2714" target="_blank" rel="external">http://poj.org/problem?id=2714</a></p>
<h1 id="理解">理解</h1>
<p>一开始以为只是一道简单的求解最远距离的题目，但是敲完代码之后发现前两个样例过了，最后一个样例数据差距很大。然后仔细读题才发现，题目中给定的正负是不定的= =。一时间没有思路，以为需要使用DP的思想，然后去看了<code>discuss</code>，才明白用枚举的方法列出每一个向量，减少了很大的复杂度，使得问题能在1s之内解决。</p>
<a id="more"></a>

<h1 id="新技能get">新技能get</h1>
<p><a href="http://www.cplusplus.com/doc/boolean/" target="_blank" rel="external">位运算</a><br>下面列出一张简表<br><img src="https://raw.githubusercontent.com/Xuanwo/xuanwo.github.io/master/imgs/exercise/%E4%BD%8D%E8%BF%90%E7%AE%97.jpg" alt="位运算简表"><br>注意区分位运算<code>~</code>与逻辑运算<code>!</code>的区别。</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include&lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include&lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include&lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#include&lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#include&lt;cstring&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</div><div class="line"><span class="keyword">double</span> mx, my, cx, cy;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> V</div><div class="line">{</div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> V &a) <span class="keyword">const</span></div><div class="line">    {</div><div class="line">        <span class="keyword">double</span> t = <span class="built_in">atan2</span>(y, x);</div><div class="line">        <span class="keyword">double</span> at = <span class="built_in">atan2</span>(a.y, a.x);</div><div class="line">        <span class="keyword">return</span> t &lt; at;</div><div class="line">    }</div><div class="line">} v[N &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> n, i, ci, end;</div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n) && n)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &x, &y);</div><div class="line">            v[i &lt;&lt; <span class="number">1</span>].x = x;</div><div class="line">            v[i &lt;&lt; <span class="number">1</span>].y = y;</div><div class="line">            v[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].x = -x;</div><div class="line">            v[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].y = -y;</div><div class="line">        }</div><div class="line">        sort(v, v + (n &lt;&lt; <span class="number">1</span>));</div><div class="line">        cx = cy = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        {</div><div class="line">            cx += v[i].x;</div><div class="line">            cy += v[i].y;</div><div class="line">        }</div><div class="line">        mx = cx; my = cy;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, end = n &lt;&lt; <span class="number">1</span>; i &lt; end; i++)</div><div class="line">        {</div><div class="line">            ci = (i + n) % end;</div><div class="line">            cx += v[ci].x - v[i].x;</div><div class="line">            cy += v[ci].y - v[i].y;</div><div class="line">            <span class="keyword">if</span> (cx * cx + cy * cy &gt; mx * mx + my * my)</div><div class="line">                mx = cx, my = cy;</div><div class="line">        }</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Maximum distance = %.3f meters.\n"</span>, <span class="built_in">sqrt</span>((<span class="keyword">double</span>)mx * mx + my * my));</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月15日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2714" target="_blank" rel="external">http://poj.org/problem?id=2714</a></p>
<h1 id="理解">理解</h1>
<p>一开始以为只是一道简单的求解最远距离的题目，但是敲完代码之后发现前两个样例过了，最后一个样例数据差距很大。然后仔细读题才发现，题目中给定的正负是不定的= =。一时间没有思路，以为需要使用DP的思想，然后去看了<code>discuss</code>，才明白用枚举的方法列出每一个向量，减少了很大的复杂度，使得问题能在1s之内解决。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="枚举" scheme="https://xuanwo.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 3048 Max Factor]]></title>
    <link href="https://xuanwo.github.io/2014/07/15/POJ-3048-Max-Factor/"/>
    <id>https://xuanwo.github.io/2014/07/15/POJ-3048-Max-Factor/</id>
    <published>2014-07-14T17:21:24.000Z</published>
    <updated>2014-07-15T02:25:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=3048" target="_blank" rel="external">http://poj.org/problem?id=3048</a></p>
<h1 id="理解">理解</h1>
<p>这不是我做过的最简单的题目，但一定是我做起来最逗比的题目。题意很明白，就是输出给定的数里面有最大值质因数的那个。题意中明确说明给定的数的范围是1到20000，然后我就开始机智了，20000的开方约为141，我只要打一个1到150以内所有素数的表，就OK啦～空间换时间，复杂度低得很。开开心心的敲完代码，结果WA了。看了一下discuss，针对一些特例微调了一下代码，结果还是WA。然后就进入坑爹模式，一坑就是一个下午。直到终于忍不住了，去问学长，学长看了一眼，说150到20000之间的质数呢？恍然大悟= =，没有考虑本身也是质数的情况，坑。</p>
<a id="more"></a>

<h1 id="新技能get">新技能get</h1>
<ul>
<li>卡题过久时，应当毫不犹豫地放弃或者寻求帮助。</li>
<li>不要执着于小数据特例而忘记大数据的测试，</li>
</ul>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[<span class="number">4000</span>], pNum = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> f[<span class="number">20001</span>];</div><div class="line"><span class="keyword">void</span> Prime()</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">20001</span>; i++)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (!f[i])</div><div class="line">        {</div><div class="line">            p[pNum++] = i;</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pNum && i * p[j] &lt; <span class="number">20001</span>; j++)</div><div class="line">        {</div><div class="line">            f[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (!(i % p[j])) <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> i, n, t, mmax = -<span class="number">1</span>, pos;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n);</div><div class="line">    Prime();</div><div class="line">    <span class="keyword">while</span> (n--)</div><div class="line">    {</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &t);</div><div class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (mmax &lt; <span class="number">1</span>)</div><div class="line">            {</div><div class="line">                mmax = <span class="number">1</span>;</div><div class="line">                pos = <span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="keyword">for</span> (i = pNum - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span> (t &gt;= p[i] && t % p[i] == <span class="number">0</span>)</div><div class="line">                {</div><div class="line">                    <span class="keyword">if</span> (mmax &lt; p[i])</div><div class="line">                    {</div><div class="line">                        mmax = p[i];</div><div class="line">                        pos = t;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos);</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月14日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=3048" target="_blank" rel="external">http://poj.org/problem?id=3048</a></p>
<h1 id="理解">理解</h1>
<p>这不是我做过的最简单的题目，但一定是我做起来最逗比的题目。题意很明白，就是输出给定的数里面有最大值质因数的那个。题意中明确说明给定的数的范围是1到20000，然后我就开始机智了，20000的开方约为141，我只要打一个1到150以内所有素数的表，就OK啦～空间换时间，复杂度低得很。开开心心的敲完代码，结果WA了。看了一下discuss，针对一些特例微调了一下代码，结果还是WA。然后就进入坑爹模式，一坑就是一个下午。直到终于忍不住了，去问学长，学长看了一眼，说150到20000之间的质数呢？恍然大悟= =，没有考虑本身也是质数的情况，坑。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="简单计算" scheme="https://xuanwo.github.io/tags/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1017 Packets]]></title>
    <link href="https://xuanwo.github.io/2014/07/14/POJ-1017-Packets/"/>
    <id>https://xuanwo.github.io/2014/07/14/POJ-1017-Packets/</id>
    <published>2014-07-13T16:42:02.000Z</published>
    <updated>2014-07-14T07:51:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1017" target="_blank" rel="external">http://poj.org/problem?id=1017</a></p>
<h1 id="理解">理解</h1>
<p>在COJ上有一道一模一样的题目，当时做的时候没有做出来，因为没有考虑好剩余空间的利用。6<em>6和1</em>1的情况最为简单，但是其余的情况就分情况考虑了，特别是对于3<em>3这种情况而言，因为一个箱子正好可以装4个3</em>3的产品。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> n, a, b, c, d, e, f, x, y;</div><div class="line">    <span class="keyword">int</span> u[<span class="number">4</span>] = {<span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>};</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f && (a != <span class="number">0</span> || b != <span class="number">0</span> || c != <span class="number">0</span> || d != <span class="number">0</span> || e != <span class="number">0</span> || f != <span class="number">0</span>))</div><div class="line">    {</div><div class="line">        n = f + e + d + (c + <span class="number">3</span>) / <span class="number">4</span>;</div><div class="line">        y = <span class="number">5</span> * d + u[c % <span class="number">4</span>];</div><div class="line">        <span class="keyword">if</span> (b &gt; y) n += (b - y + <span class="number">8</span>) / <span class="number">9</span>;</div><div class="line">        x = <span class="number">36</span> * n - <span class="number">36</span> * f - <span class="number">25</span> * e - <span class="number">16</span> * d - <span class="number">9</span> * c - <span class="number">4</span> * b;</div><div class="line">        <span class="keyword">if</span> (a &gt; x) n += (a - x + <span class="number">35</span>) / <span class="number">36</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; endl;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月14日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1017" target="_blank" rel="external">http://poj.org/problem?id=1017</a></p>
<h1 id="理解">理解</h1>
<p>在COJ上有一道一模一样的题目，当时做的时候没有做出来，因为没有考虑好剩余空间的利用。6<em>6和1</em>1的情况最为简单，但是其余的情况就分情况考虑了，特别是对于3<em>3这种情况而言，因为一个箱子正好可以装4个3</em>3的产品。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="简单计算" scheme="https://xuanwo.github.io/tags/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1657 Distance on Chessboard]]></title>
    <link href="https://xuanwo.github.io/2014/07/14/POJ-1657-Distance-on-Chessboard/"/>
    <id>https://xuanwo.github.io/2014/07/14/POJ-1657-Distance-on-Chessboard/</id>
    <published>2014-07-13T16:42:02.000Z</published>
    <updated>2014-07-13T08:46:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1657" target="_blank" rel="external">http://poj.org/problem?id=1657</a></p>
<h1 id="理解">理解</h1>
<p>再一次脑洞大开了= =，居然还写了一个<code>normalize</code>函数用来区分是不是可行的走法，其实只要通过<code>abs(x-y)%2!=0</code>即可实现判断斜的方向上是否可以行走了。恩，这是程序设计实践导引上的例题，加上中文，没有什么好讲的。不过需要注意位置没有发生改变时的特殊情况。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> t;</div><div class="line"><span class="keyword">char</span> x1, x2;</div><div class="line"><span class="keyword">int</span> y1, y2;</div><div class="line"><span class="keyword">int</span> x, y;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">    <span class="keyword">while</span> (t--)</div><div class="line">    {</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1;</div><div class="line">        getchar();</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x2 &gt;&gt; y2;</div><div class="line">        x = <span class="built_in">abs</span>(x1 - x2);</div><div class="line">        y = <span class="built_in">abs</span>(y1 - y2);</div><div class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> && y == <span class="number">0</span>)  <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 0 0 0"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (x &lt; y) <span class="built_in">cout</span> &lt;&lt; y;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; x;</div><div class="line">            <span class="keyword">if</span> (x == y || x == <span class="number">0</span> || y == <span class="number">0</span>)    <span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span>;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" 2"</span>;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>)  <span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span>;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" 2"</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(x - y) % <span class="number">2</span> != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" Inf"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x == y)   <span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" 2"</span> &lt;&lt; endl;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月13日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1657" target="_blank" rel="external">http://poj.org/problem?id=1657</a></p>
<h1 id="理解">理解</h1>
<p>再一次脑洞大开了= =，居然还写了一个<code>normalize</code>函数用来区分是不是可行的走法，其实只要通过<code>abs(x-y)%2!=0</code>即可实现判断斜的方向上是否可以行走了。恩，这是程序设计实践导引上的例题，加上中文，没有什么好讲的。不过需要注意位置没有发生改变时的特殊情况。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="简单计算" scheme="https://xuanwo.github.io/tags/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 3194 Equidivisions]]></title>
    <link href="https://xuanwo.github.io/2014/07/13/POJ-3194-Equidivisions/"/>
    <id>https://xuanwo.github.io/2014/07/13/POJ-3194-Equidivisions/</id>
    <published>2014-07-12T23:12:37.000Z</published>
    <updated>2014-07-13T04:49:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=3194" target="_blank" rel="external">http://poj.org/problem?id=3194</a></p>
<h1 id="理解">理解</h1>
<p>本以为只要逐个判断每一个数是否有相邻即可，事实上，少考虑了一种情况。<br>比如下面给出的这种：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2211</div><div class="line">1111</div><div class="line">1111</div><div class="line">1122</div></pre></td></tr></table></figure><br>根据我原来的思路这种也是good，但其实并不是如此。当然，这个例子并不完备，但用于指出原来思路的漏洞已经够了。正确的思路应当是使用DFS来寻找是否存在独立的区块。<br><br><a id="more"></a><br><br># 代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> N, ans;</div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">101</span>][<span class="number">101</span>];  </div><div class="line"><span class="keyword">int</span> visit[<span class="number">101</span>][<span class="number">101</span>];  </div><div class="line"></div><div class="line"><span class="keyword">int</span> step[<span class="number">4</span>][<span class="number">2</span>] = {{-<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, -<span class="number">1</span>}};  </div><div class="line"></div><div class="line"><span class="keyword">int</span> color[<span class="number">101</span>];  </div><div class="line"><span class="keyword">bool</span> Check(<span class="keyword">int</span> x, <span class="keyword">int</span> y)  </div><div class="line">{  </div><div class="line">    <span class="keyword">if</span> (x &gt;= N || x &lt; <span class="number">0</span> || y &gt;= N || y &lt; <span class="number">0</span>)  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">}  </div><div class="line"><span class="keyword">void</span> DFS(<span class="keyword">int</span> CurX, <span class="keyword">int</span> CurY)  </div><div class="line">{  </div><div class="line">    ans++;  </div><div class="line">    visit[CurX][CurY] = <span class="number">1</span>;  </div><div class="line">    color[<span class="built_in">map</span>[CurX][CurY]] = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)  </div><div class="line">    {  </div><div class="line">        <span class="keyword">int</span> x = CurX+step[i][<span class="number">0</span>];  </div><div class="line">        <span class="keyword">int</span> y = CurY+step[i][<span class="number">1</span>];  </div><div class="line">        <span class="keyword">if</span> (Check(x, y) == <span class="keyword">false</span> || visit[x][y] == <span class="number">1</span>)  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[CurX][CurY] == <span class="built_in">map</span>[x][y] || color[<span class="built_in">map</span>[x][y]] == <span class="number">0</span>)  </div><div class="line">        {  </div><div class="line">            DFS(x, y);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">}  </div><div class="line"><span class="keyword">int</span> main()  </div><div class="line">{  </div><div class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;N && N !=<span class="number">0</span>)  </div><div class="line">    {  </div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;  </div><div class="line">        ans = <span class="number">0</span>;  </div><div class="line">        <span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));  </div><div class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="keyword">sizeof</span>(visit));  </div><div class="line">        <span class="built_in">memset</span>(color, <span class="number">0</span>, <span class="keyword">sizeof</span>(color));  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N-<span class="number">1</span>; i++)  </div><div class="line">        {  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)  </div><div class="line">            {  </div><div class="line">                <span class="keyword">int</span> a, b;  </div><div class="line">                <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;  </div><div class="line">                <span class="built_in">map</span>[a-<span class="number">1</span>][b-<span class="number">1</span>] = index;  </div><div class="line">            }  </div><div class="line">            index++;  </div><div class="line">        }  </div><div class="line">        DFS(<span class="number">0</span>, <span class="number">0</span>);  </div><div class="line">        <span class="keyword">if</span> (ans == N*N)  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"good"</span>&lt;&lt;endl;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"wrong"</span>&lt;&lt;endl;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月12日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=3194" target="_blank" rel="external">http://poj.org/problem?id=3194</a></p>
<h1 id="理解">理解</h1>
<p>本以为只要逐个判断每一个数是否有相邻即可，事实上，少考虑了一种情况。<br>比如下面给出的这种：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2211</div><div class="line">1111</div><div class="line">1111</div><div class="line">1122</div></pre></td></tr></table></figure><br>根据我原来的思路这种也是good，但其实并不是如此。当然，这个例子并不完备，但用于指出原来思路的漏洞已经够了。正确的思路应当是使用DFS来寻找是否存在独立的区块。<br><br>]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2386 Lake Counting]]></title>
    <link href="https://xuanwo.github.io/2014/07/13/POJ-2386-Lake-Counting/"/>
    <id>https://xuanwo.github.io/2014/07/13/POJ-2386-Lake-Counting/</id>
    <published>2014-07-12T21:34:56.000Z</published>
    <updated>2014-07-12T13:37:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2386" target="_blank" rel="external">http://poj.org/problem?id=2386</a></p>
<h1 id="理解">理解</h1>
<p>当年学习DFS的AC掉的一道水题。DFS的经典模板，通过找出全部的相连池塘块来确定有几块池塘。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include  &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include  &lt;cstring&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x, y, i, j, ans;</div><div class="line"><span class="keyword">char</span> Map[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> visited[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfs(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (!visited[i][j] && Map[i][j] == <span class="string">'W'</span>)</div><div class="line">    {</div><div class="line">        visited[i][j] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; y && Map[i][j + <span class="number">1</span>] == <span class="string">'W'</span>)     dfs(i, j + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; y && i - <span class="number">1</span> &gt;= <span class="number">0</span> && Map[i - <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">'W'</span>)    dfs(i - <span class="number">1</span>, j + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> && Map[i - <span class="number">1</span>][j] == <span class="string">'W'</span>)    dfs(i - <span class="number">1</span>, j);</div><div class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> && j - <span class="number">1</span> &gt;= <span class="number">0</span> && Map[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'W'</span>)   dfs(i - <span class="number">1</span>, j - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> && Map[i][j - <span class="number">1</span>] == <span class="string">'W'</span>)     dfs(i, j - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> && i + <span class="number">1</span> &lt; x && Map[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'W'</span>)     dfs(i + <span class="number">1</span>, j - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; x && Map[i + <span class="number">1</span>][j] == <span class="string">'W'</span>)      dfs(i + <span class="number">1</span>, j);</div><div class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; x && j + <span class="number">1</span> &lt; y && Map[i + <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">'W'</span>)     dfs(i + <span class="number">1</span>, j + <span class="number">1</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &x, &y);</div><div class="line"></div><div class="line">    ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x; i++)    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, Map[i]);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x; i++)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; y; j++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (Map[i][j] == <span class="string">'W'</span> && !visited[i][j])</div><div class="line">            {</div><div class="line">                dfs(i, j);</div><div class="line">                ans ++ ;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2386" target="_blank" rel="external">http://poj.org/problem?id=2386</a></p>
<h1 id="理解">理解</h1>
<p>当年学习DFS的AC掉的一道水题。DFS的经典模板，通过找出全部的相连池塘块来确定有几块池塘。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1321 棋盘问题]]></title>
    <link href="https://xuanwo.github.io/2014/07/13/POJ-1321-Chess-Problem/"/>
    <id>https://xuanwo.github.io/2014/07/13/POJ-1321-Chess-Problem/</id>
    <published>2014-07-12T21:30:59.000Z</published>
    <updated>2014-07-12T13:31:07.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1321" target="_blank" rel="external">http://poj.org/problem?id=1321</a></p>
<h1 id="理解">理解</h1>
<p>感觉还是蛮简单的一道题目，主要是因为数据特别水，最大只有8*8的棋盘，用DFS按照行来搜索。主要的问题在于如何确保同列不存在重复的棋子。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> pic[<span class="number">8</span>][<span class="number">8</span>];</div><div class="line"><span class="keyword">int</span> col[<span class="number">8</span>];</div><div class="line"><span class="keyword">int</span> c;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> begin, <span class="keyword">int</span> num)</div><div class="line">{</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (pic[begin][j] == <span class="string">'#'</span> && col[j] == <span class="number">0</span>)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>)</div><div class="line">                c++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            {</div><div class="line">                col[j] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> h = begin + <span class="number">1</span>; h &lt; n - num + <span class="number">2</span>; h++)</div><div class="line">                    dfs(h, num - <span class="number">1</span>);</div><div class="line">                col[j] = <span class="number">0</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">while</span> ((<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) && !(n == -<span class="number">1</span> && k == -<span class="number">1</span>))</div><div class="line">    {</div><div class="line">        c = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">                <span class="built_in">cin</span> &gt;&gt; pic[i][j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            col[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - k; i++)</div><div class="line">        {</div><div class="line">            dfs(i, k);</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月12日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1321" target="_blank" rel="external">http://poj.org/problem?id=1321</a></p>
<h1 id="理解">理解</h1>
<p>感觉还是蛮简单的一道题目，主要是因为数据特别水，最大只有8*8的棋盘，用DFS按照行来搜索。主要的问题在于如何确保同列不存在重复的棋子。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1190 生日蛋糕]]></title>
    <link href="https://xuanwo.github.io/2014/07/13/POJ-1190-Birthay-Cake/"/>
    <id>https://xuanwo.github.io/2014/07/13/POJ-1190-Birthay-Cake/</id>
    <published>2014-07-12T20:48:21.000Z</published>
    <updated>2014-07-12T12:52:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1190" target="_blank" rel="external">http://poj.org/problem?id=1190</a></p>
<h1 id="理解">理解</h1>
<p>这道题是学长推荐的DFS练习题，一开始没有想明白，为什么这道题是DFS。多次推导之后发现，这道题确实需要用到深度搜索。每次都先确定第一层蛋糕的体积数，然后减去得到剩余的蛋糕体积，如此循坏，最后要保证最后的体积和等于给定的N。因为半径是递增的，所以可以去掉很大一部分无效的搜索。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N, S, M;</div><div class="line"><span class="keyword">int</span> end, min;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dfs(<span class="keyword">int</span> v, <span class="keyword">int</span> m, <span class="keyword">int</span> lastr, <span class="keyword">int</span> lasth)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> (v &gt; <span class="number">0</span> || v &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            end = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (min &lt; S)</div><div class="line">                S = min;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">int</span> i, t = <span class="number">0</span>, j, k, temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">        t += i * i * i;</div><div class="line">    <span class="keyword">if</span> (v &lt; t)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    t -= m * m * m;</div><div class="line">    <span class="keyword">int</span> maxr, maxh;</div><div class="line">    maxr = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>((v - t) * <span class="number">1.0</span> / m) &lt; lastr ? (<span class="keyword">int</span>)<span class="built_in">sqrt</span>((v - t) * <span class="number">1.0</span> / m) : lastr;</div><div class="line">    <span class="keyword">for</span> (i = maxr; i &gt;= m; i--)</div><div class="line">    {</div><div class="line">        maxh = (v - t) / (i * i) &lt; lasth ? (v - t) / (i * i) : lasth;</div><div class="line">        <span class="keyword">for</span> (j = maxh; j &gt;= m; j--)</div><div class="line">        {</div><div class="line">            temp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= m - <span class="number">1</span>; k++)</div><div class="line">                temp += (i - k) * (i - k) * (j - k);</div><div class="line">            <span class="keyword">if</span> (v &gt; temp)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> tempv = v - i * i * j;</div><div class="line">            <span class="keyword">if</span> (m == M)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span> (i * i &lt; S)</div><div class="line">                    min = i * i;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                {</div><div class="line">                    tempv = v;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            min += <span class="number">2</span> * i * j;</div><div class="line">            <span class="keyword">if</span> (min &gt; S)</div><div class="line">            {</div><div class="line">                tempv = v;</div><div class="line">                min -= <span class="number">2</span> * i * j;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            }</div><div class="line">            dfs(tempv, m - <span class="number">1</span>, i - <span class="number">1</span>, j - <span class="number">1</span>);</div><div class="line">            min -= <span class="number">2</span> * i * j;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &N, &M) == <span class="number">2</span>)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">        end = <span class="number">0</span>;</div><div class="line">        S = <span class="number">100000</span>;</div><div class="line">        dfs(N, M, <span class="number">1000</span>, <span class="number">1000</span>);</div><div class="line">        <span class="keyword">if</span> (!end)</div><div class="line">            S = <span class="number">0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, S);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月12日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1190" target="_blank" rel="external">http://poj.org/problem?id=1190</a></p>
<h1 id="理解">理解</h1>
<p>这道题是学长推荐的DFS练习题，一开始没有想明白，为什么这道题是DFS。多次推导之后发现，这道题确实需要用到深度搜索。每次都先确定第一层蛋糕的体积数，然后减去得到剩余的蛋糕体积，如此循坏，最后要保证最后的体积和等于给定的N。因为半径是递增的，所以可以去掉很大一部分无效的搜索。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="剪枝" scheme="https://xuanwo.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2488 A Knight's Journey]]></title>
    <link href="https://xuanwo.github.io/2014/07/13/POJ-2488-A-Knight's-Journey/"/>
    <id>https://xuanwo.github.io/2014/07/13/POJ-2488-A-Knight's-Journey/</id>
    <published>2014-07-12T19:59:14.000Z</published>
    <updated>2014-07-12T12:03:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2488" target="_blank" rel="external">http://poj.org/problem?id=2488</a></p>
<h1 id="理解">理解</h1>
<p>一开始没看懂，看了几遍之后才明白。是给定一个p*q的棋盘，要求计算出是否存在可能性使得骑士走遍整个棋盘，并要求按照字典序排列。这个字典序真的是要我的命，直接导致挂了很多次，还傻傻地去群里面问这道题是不是Special Judge= =。</p>
<a id="more"></a>

<h1 id="新技能get">新技能get</h1>
<p>字典序 <code>lexicographically</code></p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">class</span>  </div><div class="line">{  </div><div class="line">    <span class="keyword">public</span>:  </div><div class="line">        <span class="keyword">int</span> row;  </div><div class="line">        <span class="keyword">char</span> col;  </div><div class="line">}location;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> p,q;   </div><div class="line">          </div><div class="line"><span class="keyword">bool</span> chess[<span class="string">'Z'</span>+<span class="number">1</span>][<span class="number">27</span>];  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> x,y;  </div><div class="line"><span class="keyword">void</span> path(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> num)  </div><div class="line">{                              </div><div class="line">    <span class="keyword">switch</span>(num)  </div><div class="line">    {  </div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>: {x=i-<span class="number">1</span>; y=j-<span class="number">2</span>; <span class="keyword">break</span>;}       </div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>: {x=i+<span class="number">1</span>; y=j-<span class="number">2</span>; <span class="keyword">break</span>;}    </div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>: {x=i-<span class="number">2</span>; y=j-<span class="number">1</span>; <span class="keyword">break</span>;}    </div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>: {x=i+<span class="number">2</span>; y=j-<span class="number">1</span>; <span class="keyword">break</span>;}  </div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>: {x=i-<span class="number">2</span>; y=j+<span class="number">1</span>; <span class="keyword">break</span>;}  </div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>: {x=i+<span class="number">2</span>; y=j+<span class="number">1</span>; <span class="keyword">break</span>;}  </div><div class="line">        <span class="keyword">case</span> <span class="number">7</span>: {x=i-<span class="number">1</span>; y=j+<span class="number">2</span>; <span class="keyword">break</span>;}  </div><div class="line">        <span class="keyword">case</span> <span class="number">8</span>: {x=i+<span class="number">1</span>; y=j+<span class="number">2</span>; <span class="keyword">break</span>;}  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">bool</span> DFS(location* way,<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> step)  </div><div class="line">{  </div><div class="line">    chess[i][j]=<span class="keyword">true</span>;  </div><div class="line">    way[step].row=i;  </div><div class="line">    way[step].col=j;  </div><div class="line">    <span class="keyword">if</span>(step==way[<span class="number">0</span>].row)  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">8</span>;k++)  </div><div class="line">    {  </div><div class="line">        path(i,j,k);  </div><div class="line">        <span class="keyword">int</span> ii=x,jj=y;  </div><div class="line">        <span class="keyword">if</span>(!chess[ii][jj] && ii&gt;=<span class="number">1</span> && ii&lt;=p && jj&gt;=<span class="string">'A'</span> && jj&lt;=<span class="string">'A'</span>+q-<span class="number">1</span>)  </div><div class="line">            <span class="keyword">if</span>(DFS(way,ii,jj,step+<span class="number">1</span>))  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    }  </div><div class="line">      </div><div class="line">    chess[i][j]=<span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;       </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{  </div><div class="line">    <span class="keyword">int</span> test;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;test;  </div><div class="line">    <span class="keyword">int</span> t=<span class="number">1</span>;  </div><div class="line">    <span class="keyword">while</span>(t&lt;=test)  </div><div class="line">    {  </div><div class="line"></div><div class="line">  </div><div class="line">        <span class="built_in">memset</span>(chess,<span class="keyword">false</span>,<span class="keyword">sizeof</span>(chess));  </div><div class="line">  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;  </div><div class="line">        <span class="keyword">if</span>(p==<span class="number">1</span> && q==<span class="number">1</span>)     </div><div class="line">        {  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;t++&lt;&lt;<span class="string">':'</span>&lt;&lt;endl;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"A1"</span>&lt;&lt;endl&lt;&lt;endl;  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        }  </div><div class="line">        <span class="keyword">if</span>(p*q&gt;<span class="number">26</span> || p&gt;=<span class="number">9</span> || q&gt;=<span class="number">9</span> || p&lt;=<span class="number">2</span> || q&lt;=<span class="number">2</span>)       </div><div class="line">        {  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;t++&lt;&lt;<span class="string">':'</span>&lt;&lt;endl;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;endl&lt;&lt;endl;  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        }  </div><div class="line">          </div><div class="line">        location* way=<span class="keyword">new</span> location[p*q+<span class="number">1</span>];  </div><div class="line">        way[<span class="number">0</span>].row=p*q; </div><div class="line">        <span class="keyword">bool</span> flag=<span class="keyword">false</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="string">'A'</span>;j&lt;=<span class="string">'A'</span>+q-<span class="number">1</span>;j++)  </div><div class="line">        {  </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)  </div><div class="line">                <span class="keyword">if</span>(DFS(way,i,j,<span class="number">1</span>))  </div><div class="line">                {  </div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;t++&lt;&lt;<span class="string">':'</span>&lt;&lt;endl;  </div><div class="line">                      </div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=way[<span class="number">0</span>].row;k++)  </div><div class="line">                        <span class="built_in">cout</span>&lt;&lt;way[k].col&lt;&lt;way[k].row;  </div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;endl&lt;&lt;endl;  </div><div class="line">                    flag=<span class="keyword">true</span>;  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                }  </div><div class="line">                <span class="keyword">if</span>(flag)  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">        }  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span>(!flag)  </div><div class="line">        {  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;t++&lt;&lt;<span class="string">':'</span>&lt;&lt;endl;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;endl&lt;&lt;endl;  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月12日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2488" target="_blank" rel="external">http://poj.org/problem?id=2488</a></p>
<h1 id="理解">理解</h1>
<p>一开始没看懂，看了几遍之后才明白。是给定一个p*q的棋盘，要求计算出是否存在可能性使得骑士走遍整个棋盘，并要求按照字典序排列。这个字典序真的是要我的命，直接导致挂了很多次，还傻傻地去群里面问这道题是不是Special Judge= =。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1753 Flip Game]]></title>
    <link href="https://xuanwo.github.io/2014/07/12/POJ-1753-Flip-Game/"/>
    <id>https://xuanwo.github.io/2014/07/12/POJ-1753-Flip-Game/</id>
    <published>2014-07-12T13:48:16.000Z</published>
    <updated>2014-07-12T06:12:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1753" target="_blank" rel="external">http://poj.org/problem?id=1753</a></p>
<h1 id="理解">理解</h1>
<p>我一开始的思路是错误的，企图通过正面的方法来找出从当前情况达到全白和全黑的方法，多次尝试之后，发现很难找到一条通用的方法，只能找出几个比较简单的特例。后来才明白过来，应当从全黑或者全白的情况出发，再来判断给定的图是不是其中的一个子集。因为是一个4X4的格子，不难看出，总共的情况只有2^16种。只要一一枚举即可。最后的步数就是这颗树的深度，使用DFS即可实现。</p>
<a id="more"></a>

<h1 id="新技能get">新技能get</h1>
<p>深度优先搜索<code>DFS</code><br>对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include&lt;iostream&gt;  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">bool</span> chess[<span class="number">6</span>][<span class="number">6</span>]={<span class="keyword">false</span>}; </div><div class="line"><span class="keyword">bool</span> flag;  </div><div class="line"><span class="keyword">int</span> step;  </div><div class="line"><span class="keyword">int</span> r[]={-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};</div><div class="line"><span class="keyword">int</span> c[]={<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>};  </div><div class="line">  </div><div class="line"><span class="keyword">bool</span> judge_all(<span class="keyword">void</span>)</div><div class="line">{  </div><div class="line">    <span class="keyword">int</span> i,j;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)  </div><div class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++)  </div><div class="line">            <span class="keyword">if</span>(chess[i][j]!=chess[<span class="number">1</span>][<span class="number">1</span>])  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">void</span> flip(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</div><div class="line">{  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)  </div><div class="line">        chess[row+r[i]][col+c[i]]=!chess[row+r[i]][col+c[i]];  </div><div class="line">    <span class="keyword">return</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> deep)  </div><div class="line">{  </div><div class="line">    <span class="keyword">if</span>(deep==step)  </div><div class="line">    {  </div><div class="line">        flag=judge_all();  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>(flag||row==<span class="number">5</span>)<span class="keyword">return</span>;  </div><div class="line">  </div><div class="line">    flip(row,col);      </div><div class="line">    <span class="keyword">if</span>(col&lt;<span class="number">4</span>)  </div><div class="line">        dfs(row,col+<span class="number">1</span>,deep+<span class="number">1</span>);  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        dfs(row+<span class="number">1</span>,<span class="number">1</span>,deep+<span class="number">1</span>);  </div><div class="line">  </div><div class="line">    flip(row,col);       </div><div class="line">    <span class="keyword">if</span>(col&lt;<span class="number">4</span>)  </div><div class="line">        dfs(row,col+<span class="number">1</span>,deep);  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        dfs(row+<span class="number">1</span>,<span class="number">1</span>,deep);  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span>;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)  </div><div class="line">{  </div><div class="line">    <span class="keyword">char</span> temp;  </div><div class="line">    <span class="keyword">int</span> i,j;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)  </div><div class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++)  </div><div class="line">        {  </div><div class="line">            <span class="built_in">cin</span>&gt;&gt;temp;  </div><div class="line">            <span class="keyword">if</span>(temp==<span class="string">'b'</span>)   </div><div class="line">                chess[i][j]=<span class="keyword">true</span>;  </div><div class="line">        }  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span>(step=<span class="number">0</span>;step&lt;=<span class="number">16</span>;step++)   </div><div class="line">    {                            </div><div class="line">        dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);  </div><div class="line">        <span class="keyword">if</span>(flag)<span class="keyword">break</span>;  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>(flag)  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;step&lt;&lt;endl;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Impossible"</span>&lt;&lt;endl;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月12日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1753" target="_blank" rel="external">http://poj.org/problem?id=1753</a></p>
<h1 id="理解">理解</h1>
<p>我一开始的思路是错误的，企图通过正面的方法来找出从当前情况达到全白和全黑的方法，多次尝试之后，发现很难找到一条通用的方法，只能找出几个比较简单的特例。后来才明白过来，应当从全黑或者全白的情况出发，再来判断给定的图是不是其中的一个子集。因为是一个4X4的格子，不难看出，总共的情况只有2^16种。只要一一枚举即可。最后的步数就是这颗树的深度，使用DFS即可实现。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="枚举" scheme="https://xuanwo.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="DFS" scheme="https://xuanwo.github.io/tags/DFS/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 1018 Communication System]]></title>
    <link href="https://xuanwo.github.io/2014/07/12/POJ-1018-Communication-System/"/>
    <id>https://xuanwo.github.io/2014/07/12/POJ-1018-Communication-System/</id>
    <published>2014-07-12T13:06:29.000Z</published>
    <updated>2014-07-12T05:12:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1018" target="_blank" rel="external">http://poj.org/problem?id=1018</a></p>
<h1 id="理解">理解</h1>
<p>题意比较清晰，就是找出最大的B/sum(P)，要求网络设备的性价比最高。采用枚举的方法，把所有情况都列出来，然后有些明显不需要考虑的情况，可以直接舍去。</p>
<a id="more"></a>

<h1 id="新技能get">新技能get</h1>
<p><code>Sublime-Text</code>在C++模式下输入main+回车可以直接完成符合C++11的代码，点个赞</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;  </span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;  </span></div><div class="line"><span class="preprocessor">#include &lt;iomanip&gt;  </span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">class</span> info  </div><div class="line">{  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    <span class="keyword">int</span> B;  </div><div class="line">    <span class="keyword">double</span> P;    </div><div class="line">    <span class="keyword">int</span> id; </div><div class="line">};  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> cmp(<span class="keyword">const</span> <span class="keyword">void</span>* a,<span class="keyword">const</span> <span class="keyword">void</span>* b)  </div><div class="line">{  </div><div class="line">    info* x=(info*)a;  </div><div class="line">    info* y=(info*)b;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>((x-&gt;B)==(y-&gt;B))   </div><div class="line">    {  </div><div class="line">        <span class="keyword">if</span>((x-&gt;P)==(y-&gt;P))   </div><div class="line">            <span class="keyword">return</span> (x-&gt;id)-(y-&gt;id);     </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> (x-&gt;P)-(y-&gt;P);  </div><div class="line">    }  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> (x-&gt;B)-(y-&gt;B);   </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">double</span> max(<span class="keyword">double</span> a,<span class="keyword">double</span> b)  </div><div class="line">{  </div><div class="line">    <span class="keyword">return</span> a&gt;b?a:b;  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</div><div class="line">{  </div><div class="line">    <span class="keyword">int</span> test;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;test;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=test;t++)  </div><div class="line">    {  </div><div class="line">        <span class="keyword">int</span> n;   </div><div class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span>* MaxB=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];  </div><div class="line">        info* dev=<span class="keyword">new</span> info[<span class="number">100</span>*<span class="number">100</span>+<span class="number">1</span>];      </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> pd=<span class="number">0</span>;  </div><div class="line">  </div><div class="line">       </div><div class="line">  </div><div class="line">          </div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)  </div><div class="line">        {  </div><div class="line">            <span class="keyword">int</span> mi;  </div><div class="line">            <span class="built_in">cin</span>&gt;&gt;mi;  </div><div class="line">            m+=mi;  </div><div class="line">  </div><div class="line">            MaxB[i]=-<span class="number">1</span>;  </div><div class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=mi;j++)  </div><div class="line">            {  </div><div class="line">                pd++;  </div><div class="line">                <span class="built_in">cin</span>&gt;&gt;dev[pd].B&gt;&gt;dev[pd].P;  </div><div class="line">                dev[pd].id=i;  </div><div class="line">  </div><div class="line">                MaxB[i]=max(MaxB[i],dev[pd].B);  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">  </div><div class="line">       </div><div class="line">  </div><div class="line">        qsort(dev,m+<span class="number">1</span>,<span class="keyword">sizeof</span>(info),cmp);  </div><div class="line">  </div><div class="line">       </div><div class="line">  </div><div class="line">        <span class="keyword">bool</span> flag=<span class="keyword">false</span>;  </div><div class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m-(n-<span class="number">1</span>);i++)   </div><div class="line">        {                          </div><div class="line">            <span class="keyword">bool</span>* vist=<span class="keyword">new</span> <span class="keyword">bool</span>[n+<span class="number">1</span>];  </div><div class="line">            <span class="built_in">memset</span>(vist,<span class="keyword">false</span>,<span class="keyword">sizeof</span>(<span class="keyword">bool</span>)*(n+<span class="number">1</span>));  </div><div class="line">  </div><div class="line">            vist[ dev[i].id ]=<span class="keyword">true</span>;  </div><div class="line">            <span class="keyword">double</span> price=dev[i].P;  </div><div class="line">            <span class="keyword">int</span> count=<span class="number">1</span>;     </div><div class="line">  </div><div class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=m;j++)  </div><div class="line">            {  </div><div class="line">                <span class="keyword">if</span>(vist[ dev[j].id ])  </div><div class="line">                    <span class="keyword">continue</span>;  </div><div class="line">  </div><div class="line">                <span class="keyword">if</span>(dev[i].B &gt; MaxB[ dev[j].id ])   </div><div class="line">                {  </div><div class="line">                    flag=<span class="keyword">true</span>;   </div><div class="line">                    <span class="keyword">break</span>;       </div><div class="line">                }  </div><div class="line">  </div><div class="line">                vist[ dev[j].id ]=<span class="keyword">true</span>;  </div><div class="line">                price+=dev[j].P;  </div><div class="line">                count++;  </div><div class="line">            }  </div><div class="line">            <span class="keyword">if</span>(flag || count&lt;n)  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">  </div><div class="line">            ans=max(ans,(dev[i].B/price));  </div><div class="line">        }  </div><div class="line">  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">3</span>)&lt;&lt;ans&lt;&lt;endl;  </div><div class="line">  </div><div class="line">        <span class="keyword">delete</span> MaxB;  </div><div class="line">        <span class="keyword">delete</span> dev;  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月12日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=1018" target="_blank" rel="external">http://poj.org/problem?id=1018</a></p>
<h1 id="理解">理解</h1>
<p>题意比较清晰，就是找出最大的B/sum(P)，要求网络设备的性价比最高。采用枚举的方法，把所有情况都列出来，然后有些明显不需要考虑的情况，可以直接舍去。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="剪枝" scheme="https://xuanwo.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
      <category term="枚举" scheme="https://xuanwo.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="Sublime-Text" scheme="https://xuanwo.github.io/tags/Sublime-Text/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2739 Sum of Consecutive Prime Numbers]]></title>
    <link href="https://xuanwo.github.io/2014/07/12/POJ-2739-Sum-of-Consecutive-Prime-Numbers/"/>
    <id>https://xuanwo.github.io/2014/07/12/POJ-2739-Sum-of-Consecutive-Prime-Numbers/</id>
    <published>2014-07-11T19:49:38.000Z</published>
    <updated>2014-07-11T12:00:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2739" target="_blank" rel="external">http://poj.org/problem?id=2739</a></p>
<h1 id="理解">理解</h1>
<p>跑偏了= =。<code>An output line includes the number of representations for the input integer as the sum of one or more consecutive prime numbers.</code>居然理解成输出用于表示的质数的个数了，卡了很久。</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> flag[<span class="number">10002</span>];</div><div class="line"><span class="keyword">int</span> prime[<span class="number">10002</span>], sum[<span class="number">1402</span>];</div><div class="line"><span class="keyword">int</span> tmp;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> i, j, k ;</div><div class="line">    <span class="built_in">memset</span>(flag, -<span class="number">1</span>, <span class="keyword">sizeof</span>(flag));</div><div class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</div><div class="line">    <span class="built_in">memset</span>(prime, <span class="number">0</span>, <span class="keyword">sizeof</span>(prime));</div><div class="line"></div><div class="line">    tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt;= <span class="number">10000</span>; i++ )</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span> ( flag[i] )</div><div class="line">        {</div><div class="line">            prime[++tmp] = i;</div><div class="line">            <span class="keyword">for</span> ( j = <span class="number">2</span>; i * j &lt;= <span class="number">10000</span>; j++ )</div><div class="line">                flag[i * j] = <span class="number">0</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= tmp; i++ )</div><div class="line">        sum[i] = sum[i - <span class="number">1</span>] + prime[i];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n, ans;</div><div class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n && n )</div><div class="line">    {</div><div class="line">        ans = i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ( prime[i] &lt; n && i &lt; tmp ) i++;</div><div class="line">        <span class="keyword">if</span> ( prime[i] == n ) ans++;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ( j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j-- )</div><div class="line">        {</div><div class="line">            <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; j; k++ )</div><div class="line">                <span class="keyword">if</span> ( sum[j] - sum[k] == n )</div><div class="line">                    ans++;</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月11日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2739" target="_blank" rel="external">http://poj.org/problem?id=2739</a></p>
<h1 id="理解">理解</h1>
<p>跑偏了= =。<code>An output line includes the number of representations for the input integer as the sum of one or more consecutive prime numbers.</code>居然理解成输出用于表示的质数的个数了，卡了很久。</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="模拟" scheme="https://xuanwo.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ 2159 Ancient Cipher]]></title>
    <link href="https://xuanwo.github.io/2014/07/11/POJ-2159-Ancient-Cipher/"/>
    <id>https://xuanwo.github.io/2014/07/11/POJ-2159-Ancient-Cipher/</id>
    <published>2014-07-11T13:30:04.000Z</published>
    <updated>2014-07-11T05:38:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2159" target="_blank" rel="external">http://poj.org/problem?id=2159</a></p>
<h1 id="理解">理解</h1>
<p>一开始的理解是按照题目的意思，先进行一次置换加密再进行一次排列加密。置换只要按照规律一个一个替换就OK，排列加密则用到了<code>next_permutation</code>函数。两重for循环，模拟出去全部的加密方法。Coding出来之后提交，WA。然后才开始审视另外的可能性：谁说置换就一定要按照规律来？事实上，的确如此，按照题意，只需要明文和密文字符形成唯一映射就OK。如果还是按照原来的思路，这道水题还真的不水。其实，在加密过程中，有一样东西是不变的，就是各个字符（对应）出现的频率。这样想的话，就简单了，只要统计出每个字符出现的概率，sort排序后，判断两个数组是否完全一致就好～</p>
<a id="more"></a>

<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> cipher[<span class="number">26</span>], clear[<span class="number">26</span>];</div><div class="line">    <span class="built_in">memset</span>(cipher, <span class="number">0</span>, <span class="keyword">sizeof</span>(cipher));</div><div class="line">    <span class="built_in">memset</span>(clear, <span class="number">0</span>, <span class="keyword">sizeof</span>(clear));</div><div class="line">    <span class="built_in">string</span> in, out;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; in;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; in.length(); i++)</div><div class="line">    {</div><div class="line">        cipher[in[i] - <span class="string">'A'</span>]++;</div><div class="line">    }</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; out;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; out.length(); i++)</div><div class="line">    {</div><div class="line">        clear[out[i] - <span class="string">'A'</span>]++;</div><div class="line">    }</div><div class="line">    sort(cipher, cipher + <span class="number">26</span>);</div><div class="line">    sort(clear, clear + <span class="number">26</span>);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</div><div class="line">        <span class="keyword">if</span> (cipher[i] != clear[i])</div><div class="line">        {</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        }</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; endl;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="更新日志">更新日志</h1>
<ul>
<li>2014年07月11日 已AC。</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>源地址：<a href="http://poj.org/problem?id=2159" target="_blank" rel="external">http://poj.org/problem?id=2159</a></p>
<h1 id="理解">理解</h1>
<p>一开始的理解是按照题目的意思，先进行一次置换加密再进行一次排列加密。置换只要按照规律一个一个替换就OK，排列加密则用到了<code>next_permutation</code>函数。两重for循环，模拟出去全部的加密方法。Coding出来之后提交，WA。然后才开始审视另外的可能性：谁说置换就一定要按照规律来？事实上，的确如此，按照题意，只需要明文和密文字符形成唯一映射就OK。如果还是按照原来的思路，这道水题还真的不水。其实，在加密过程中，有一样东西是不变的，就是各个字符（对应）出现的频率。这样想的话，就简单了，只要统计出每个字符出现的概率，sort排序后，判断两个数组是否完全一致就好～</p>
]]></summary>
    
      <category term="ACM" scheme="https://xuanwo.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="https://xuanwo.github.io/tags/POJ/"/>
    
      <category term="C/C++" scheme="https://xuanwo.github.io/tags/CC++/"/>
    
      <category term="模拟" scheme="https://xuanwo.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="排序" scheme="https://xuanwo.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="Exercise" scheme="https://xuanwo.github.io/categories/Exercise/"/>
    
  </entry>
  
</feed>
