<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://xuanwo.org/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="https://xuanwo.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://xuanwo.org/" rel="alternate" type="text/html" /><updated>2016-10-22T21:44:57+08:00</updated><id>https://xuanwo.org//</id><title type="html">Xuanwo’s Blog</title><subtitle>Long way to go
</subtitle><entry><title type="html">动态网页数据抓取踩坑分享</title><link href="https://xuanwo.org/2016/09/13/dynamic-page-data-spider" rel="alternate" type="text/html" title="动态网页数据抓取踩坑分享" /><published>2016-09-13T09:58:33+08:00</published><updated>2016-09-13T09:58:33+08:00</updated><id>https://xuanwo.org/2016/09/13/dynamic-page-data-spider</id><content type="html" xml:base="https://xuanwo.org/2016/09/13/dynamic-page-data-spider">&lt;p&gt;之前做了一些数据抓取的工作，期间也踩了一些坑，所以有了这篇文章。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;section&quot;&gt;动态网页数据源获取&lt;/h2&gt;

&lt;p&gt;需要抓取的页面是使用&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; JavaScript 框架开发的，所有的页面都是客户端渲染而成，这也就导致我只能看到一个个的 data-id ，没有办法直接获取数据。这就涉及到一个我之前没有接触过的领域——动态网页爬虫。
一番 Google 之后，我了解到动态网页爬虫大致上可以通过以下两种方法实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分析网页代码结构和请求，找到数据源的请求链接&lt;/li&gt;
  &lt;li&gt;调用Webkit渲染之后再进行抓取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二种方法相当于在命令行中跑一个浏览器，一个页面一个页面的打开，效率可想而知。再加上待抓取页面的 DOM 结构本来就比较复杂，没有添加相应的 class 和 id，导致即使渲染出来了想要抓到自己需要的数据也非常费劲。
于是只能采用第一种方案：分析了一下网页的代码之后发现所有的数据都是通过一个接口返回的。使用 Chrome 审查工具中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Network&lt;/code&gt; 工具可以获取到所有的网络请求，在里面搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; ，找到了一个 JSON 的请求。点开一看正是我们需要的数据，解决了动态网页数据源的问题。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;分类不统一&lt;/h2&gt;

&lt;p&gt;这个坑主要出在自己对目标网页的数据特性挖掘的不够。一开始以为目标网页是按照一个特定的分类来区分的，但是后来发现这个标准并不统一，最后抓取到的数据不在一个维度上。正当自己准备开工写很多特判的时候发现，如果从另外一个维度来索取数据的话，所有的数据都是统一的。
在这个案例中，就是将人为的分类切换成通过价格来获取数据，通过选择所有价格，就能获取到所有的数据，不需要再对不同维度的分类进行特判。
这个与其说是技术问题，更多的是一个经验的问题。&lt;/p&gt;

&lt;h2 id=&quot;js&quot;&gt;页面内部JS执行&lt;/h2&gt;

&lt;p&gt;这个坑就比较有趣了。
目标网页除了通过一个特定的接口获取数据之外，还会在页面内部通过 JavaScript 来直接传递数据。背后的技术考量不得而知，但是摆在我面前的问题就是我要如何获取这些 JavaScript 代码中的数据。
思考了一下之后想到了两种方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自行匹配需要的字符串&lt;/li&gt;
  &lt;li&gt;通过 phatomjs 等工具执行页面内部的 js 代码，并输出需要的数据变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自行匹配的问题在于，我需要匹配的字符串的格式不一，很难直接匹配出我需要的数据。而通过 phatomjs 执行，就能比较好的解决这个问题。&lt;/p&gt;

&lt;p&gt;一个比较脏的解决方案是这样的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载整个HTML页面到 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;通过 bs4 获取到所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签内部的内容&lt;/li&gt;
  &lt;li&gt;将我们需要的那个标签输出到一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;data.js&lt;/code&gt; 文件中&lt;/li&gt;
  &lt;li&gt;之后把将数据构造成 json 的 js 代码写入 &lt;code class=&quot;highlighter-rouge&quot;&gt;data.js&lt;/code&gt; 文件&lt;/li&gt;
  &lt;li&gt;通过 phatomjs 来执行代码&lt;/li&gt;
  &lt;li&gt;将输出通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;json.loads&lt;/code&gt; 载入并 append 到我们的数据数组中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，我们就获得了页面内部js代码中数据的json形式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;phatomjs 中执行的代码最后，千万要记得加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;phatom.exit()&lt;/code&gt;，否则不会自行退出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;phatomjs&quot;&gt;phatomjs报错&lt;/h2&gt;

&lt;p&gt;https://cli.xuanwo.org/Tools/phatomjs.html#qxcbconnection-could-not-connect-to-display&lt;/p&gt;

&lt;p&gt;当代码放到服务器上运行时候，出现了这样的报错：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;QXcbConnection: Could not connect to display
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是因为源中的phatomjs默认运行在图形界面下，只需要在运行前执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export QT_QPA_PLATFORM=offscreen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;线程调度&lt;/h2&gt;

&lt;p&gt;这个坑就比较隐蔽了，重复调试了很久。
在前面的流程中，我们有一个下载HTML页面并使用bs4解析的步骤。我之前的实现是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;subprocess.Popen()&lt;/code&gt;直接调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 之后，就打开&lt;code class=&quot;highlighter-rouge&quot;&gt;test.html&lt;/code&gt;。这样的实现导致了这样的一个问题：有可能网页还没有下载完，我就开始进行解析了，这样就会导致我的解析内容跟本就不正确。也就是说，&lt;code class=&quot;highlighter-rouge&quot;&gt;subprocess.Popen()&lt;/code&gt; 不是一个阻塞的过程，它在调用完 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 之后不会等到 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 返回再结束。
定位到问题的话，解决起来就很容易了。通过查阅文档，我知道了可以通过这种方法来保证命令执行完毕再执行下一行代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;child = subprocess.Popon(&quot;curl xxxx.com &amp;gt; test.html&quot;, shell=True)
child.wait()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;回顾 &amp;amp; 总结&lt;/h2&gt;

&lt;p&gt;这个小小的玩意儿开发没花多久，但是学到了很多东西。从之前自己一直以为很难不敢尝试的动态网页抓取到 Python subprocess 线程调度，果然不踩坑就不会有新的收获。
这次开发的东西比较敏感，涉及到公司内部的一些事务，所以代码就不开源出来了。有什么想法或者问题可以直接在评论区里提出来，我会尽量回复的。因为是一个一次性的小套件，所以没有怎么考虑优化上的事情，如果有更好的解决方案，也欢迎大家一起探讨，说不定下次就用上了呢~&lt;/p&gt;</content><category term="QingCloud" /><category term="Work" /><category term="爬虫" /><summary type="html">之前做了一些数据抓取的工作，期间也踩了一些坑，所以有了这篇文章。</summary></entry><entry><title type="html">nodebb-plugin-html5videoplayer 发布</title><link href="https://xuanwo.org/2016/08/23/nodebb-plugin-html5videoplayer" rel="alternate" type="text/html" title="nodebb-plugin-html5videoplayer 发布" /><published>2016-08-23T01:53:25+08:00</published><updated>2016-08-23T01:53:25+08:00</updated><id>https://xuanwo.org/2016/08/23/nodebb-plugin-html5videoplayer</id><content type="html" xml:base="https://xuanwo.org/2016/08/23/nodebb-plugin-html5videoplayer">&lt;p&gt;&lt;a href=&quot;&quot;&gt;nodebb-plugin-html5videoplayer&lt;/a&gt; 是一个简单的 NodeBB 插件，可以让 NodeBB 支持在线视频观看。Fork 自 &lt;a href=&quot;https://github.com/ogerly&quot;&gt;@ogerly&lt;/a&gt; 开发的 &lt;a href=&quot;https://github.com/ogerly/nodebb-plugin-videoplayer&quot;&gt;nodebb-plugin-videoplayer&lt;/a&gt;， 在他的基础上做了一些微不足道的贡献，括弧笑。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section&quot;&gt;原理&lt;/h1&gt;

&lt;p&gt;原理非常简单，将帖子中出现的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;xxx.mp4&quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;标签转换为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;video preload controls&amp;gt;
  &amp;lt;source src=&quot;xx.mp4&quot;&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也就是完全通过 HTML5 提供的 video 标签来实现在线视频的观看功能。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;区别&lt;/h1&gt;

&lt;p&gt;世上轮子千千万，我为什么要Fork原来的再造一个？&lt;/p&gt;

&lt;p&gt;最关键的因素在于我跟原作者的理念不太一样，原作者除了插入 video 标签以外，还提供了一个固定在下面下方的播放器控制条。由于版本更迭，这个播放器控制条已经失效，CSS 样式也不再适用。因此我 Fork 了原作者的插件，并上传了一个新的插件，旨在提供更简单的在线视频视频集成功能。&lt;/p&gt;

&lt;p&gt;跟原来版本的区别主要如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;纯粹的播放器，没有多余的功能，不会修改任何页面外观&lt;/li&gt;
  &lt;li&gt;页面自适应，播放窗体会自适应当前页面大小，提供跨平台一致的体验&lt;/li&gt;
  &lt;li&gt;更强的外链支持，可以引用外部的链接，不需要上传到论坛&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-2&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;目前还不知道怎么提交到 NodeBB 的插件的中心，因此只能通过 npm 手动进行安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install nodebb-plugin-html5videopalyer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-3&quot;&gt;使用&lt;/h1&gt;

&lt;p&gt;使用起来非常简单，只需要在帖子中拖动上传视频&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[video](/uploads/files/xyz.mp4)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者直接输入引用的视频链接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[video](//aa.com/bb/cc.mp4)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前仅支持&lt;code class=&quot;highlighter-rouge&quot;&gt;mp4&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;ogv&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;webm&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt;这四种格式
引用的外链需要去掉协议头，否则无法正常解析&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;p&gt;最后显示的效果可以参考这个链接： https://community.qingcloud.com/topic/556&lt;/p&gt;</content><category term="Node.js" /><category term="NodeBB" /><category term="JavaScript" /><summary type="html">nodebb-plugin-html5videoplayer 是一个简单的 NodeBB 插件，可以让 NodeBB 支持在线视频观看。Fork 自 @ogerly 开发的 nodebb-plugin-videoplayer， 在他的基础上做了一些微不足道的贡献，括弧笑。</summary></entry><entry><title type="html">NodeBB 升级迁移总结</title><link href="https://xuanwo.org/2016/07/08/nodebb-upgrade" rel="alternate" type="text/html" title="NodeBB 升级迁移总结" /><published>2016-07-08T10:00:00+08:00</published><updated>2016-07-08T10:00:00+08:00</updated><id>https://xuanwo.org/2016/07/08/nodebb-upgrade</id><content type="html" xml:base="https://xuanwo.org/2016/07/08/nodebb-upgrade">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://community.qingcloud.com/&quot;&gt;青云用户社区&lt;/a&gt;使用了开源的 NodeBB 论坛，部署之初使用&lt;code class=&quot;highlighter-rouge&quot;&gt;0.7&lt;/code&gt;版本，因为没有跟随官方进度进行更新，导致论坛版本长期停滞。一方面无法享受到官方的BUG Fix，另一方面也无法使用很多业务需求的插件。思量再三后决定对社区进行升级迁移，不在原论坛直接升级，而是部署一套新的环境，将原有的数据全部导出。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;可行性分析&lt;/h1&gt;

&lt;h2 id=&quot;nodebb-&quot;&gt;NodeBB 升级路径&lt;/h2&gt;

&lt;p&gt;NodeBB 自0.3版本后就提供了一套独特升级路径，主要有以下几个要点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NodeBB采用语义化版本号：&lt;code class=&quot;highlighter-rouge&quot;&gt;x.y.z&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt;版本号的变动，可以直接升级&lt;/li&gt;
  &lt;li&gt;只有当&lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt;版本号已经是&lt;code class=&quot;highlighter-rouge&quot;&gt;x.y&lt;/code&gt;版本下的最新版本，才能升级到&lt;code class=&quot;highlighter-rouge&quot;&gt;x.y+1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;数据迁移&lt;/h2&gt;

&lt;p&gt;NodeBB在部署的时候就使用了青云平台上的 Redis 缓存和负载均衡器。这样迁移的问题就会变的简单很多，我只需要将 NodeBB 路径下的&lt;code class=&quot;highlighter-rouge&quot;&gt;public/uploads&lt;/code&gt;资源进行打包即可，Redis 缓存和负载均衡器都可以直接使用。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;迁移步骤&lt;/h1&gt;

&lt;h2 id=&quot;nodebb&quot;&gt;迁移 NodeBB&lt;/h2&gt;

&lt;p&gt;建议在一个新的环境里面创建迁移环境。&lt;/p&gt;

&lt;h3 id=&quot;node-&quot;&gt;Node 版本&lt;/h3&gt;

&lt;p&gt;同样建议使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm&lt;/code&gt; 来管理版本，避免其他应用对NodeBB环境产生干扰。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm install stable
nvm use stable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果不想每一次退出shell后都要执行&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm use stable&lt;/code&gt;，可以手动设置默认版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm alias default stable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nodebb--1&quot;&gt;NodeBB 版本&lt;/h3&gt;

&lt;p&gt;首先下载跟生产环境一致的NodeBB版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone -b v0.7.x 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后使用跟生产环境一致的&lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt;，NoedBB升级工具会自动更新&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;，所以无需修改。&lt;/p&gt;

&lt;p&gt;然后运行&lt;code class=&quot;highlighter-rouge&quot;&gt;./nodebb upgrade&lt;/code&gt;以升级数据结构和依赖并打上所有的补丁。&lt;/p&gt;

&lt;p&gt;运行完毕后切换到更高版本的分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch
git checkout v0.8.x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样运行&lt;code class=&quot;highlighter-rouge&quot;&gt;./nodebb upgrade&lt;/code&gt;，以此类推，直至升级到官方最新版本。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;迁移数据&lt;/h2&gt;

&lt;p&gt;正如之前所说的，Redis已经被直接升级到最新版本，接下来只需要将用户上传的数据导出即可。&lt;/p&gt;

&lt;p&gt;在生产环境中执行如下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /path/to/nodebb/public
tar -cvf nodebb_assets_backup.tar.gz ./upload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;切换到迁移环境后执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /path/to/nodebb/public
tar -xvf nodebb_assets_backup.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;注意事项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;目前NodeBB不支持降级操作，如果担心破坏生产环境，可以在生成一个 Redis 的备份并重新创建资源，不要对原数据库进行操作。&lt;/li&gt;
  &lt;li&gt;由于 Redis 中会保存对原论坛的主题和插件等配置，在迁移到新版本后，有很大可能会产生错误，可以执行&lt;code class=&quot;highlighter-rouge&quot;&gt;./nodebb reset -a&lt;/code&gt;以清除所有主题和插件配置。确认 NodeBB 运行正常后再逐个启用即可。&lt;/li&gt;
  &lt;li&gt;在升级时候会因为Node.js版本的问题导致某些依赖无法安装，建议可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;0.12&lt;/code&gt;版本进行升级，升级成功后再切换到更新的版本上重新进行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --production&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-6&quot;&gt;感悟&lt;/h1&gt;

&lt;h2 id=&quot;nodebb-1&quot;&gt;NodeBB的升级路线设计&lt;/h2&gt;

&lt;p&gt;这次升级迁移其实经历很久的论证过程。
一开始简单地尝试一下之后认定无法直接进行升级就产生了一些畏难情绪，心里想着不如就让它这样，反正现在线上跑得也挺好的，没有出什么太大的问题。而后种种需求的提出让我有些招架不住了，现有的落后版本缺少很多API和现有的插件，自行开发和维护的成本非唱高。这也是我有一段时间觉得开源在实际应用中并不是那么美好的原因。
等到我真的沉下心来仔细研究官方的文档，才发现 NodeBB 看似鬼畜坑爹的升级路线设计其实也有着其优雅之处。数据库的结构可以随之版本同步更新，这样可以避免早期数据库结构设计不合理带来的种种弊端，并防止产生版本之间的Breaking Change。抛开API层面的兼容性不谈，NodeBB可以做到我直接使用原来的 Redis 从 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.7.0&lt;/code&gt; 一路升级到 &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.4&lt;/code&gt;，还能保证我的数据没有出现任何丢失，就冲着这一点，我觉得这个升级路线的设计是有价值的。
当然，路线是好的，但是在具体实现升级功能的时候还有待商榷之处：不难发现升级过程中有很大一部分的重复操作，其实这些都是可以避免的。每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;x.y&lt;/code&gt;版本号之间的更新操作其实都是一致的，完全可以通过脚本实现。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;应用部署的灵活性&lt;/h2&gt;

&lt;p&gt;上线任何应用之前都应该考虑其架构的扩展性和迁移能力。
很多时候，部署一套应用的目的根本就不是为了去使用他，只是单纯的部署一个玩一玩而已。在这样的心态下，总会干出这样的事情：在一个20G的主机上跑ownCloud；在一个主机上同时跑wordpress，nginx和mysql等应用。当然，这样做并没有什么问题，毕竟是自己的Server，哪怕天天 &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rf /&lt;/code&gt;都是OK的。
但是如果是一套需要给别人用的应用，部署时的扩展性和迁移能力就必须考虑在内。这其实是两个很实在的问题：服务器空间耗尽，性能跟不上怎么办？服务器挂了，如何保全自己的数据？自己设计这样一套系统很麻烦，但是如果是在青云上就不一样了。我最喜欢青云的一点就是，青云几乎所有的资源都是可以动态伸缩和扩展的。带宽受限制了，直接扩大；服务器性能不够了，加核心加内存；单个服务器支撑不住了，批量生成十个并使用负载均衡器进行负载均衡操作；想要测试某个最新的特性，直接从线上创建一个Snapshot并生成资源进行测试。
在本次迁移的过程中，我们就可以看出来，我们可以直接使用 Redis 进行升级，而不是手动导出数据库备份再执行导入操作。同样地，我们也不需要再重新配置一遍 Nginx ，只需要再创建一个负载均衡器即可。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年07月08日 首次发布&lt;/li&gt;
  &lt;li&gt;2016年07月15日 青云社区成功上线&lt;/li&gt;
&lt;/ul&gt;</content><category term="Node.js" /><category term="JavaScript" /><summary type="html">前言</summary></entry><entry><title type="html">新博客上线&amp;amp;Hexo主题开发入门</title><link href="https://xuanwo.org/2016/06/29/new-blog-new-life" rel="alternate" type="text/html" title="新博客上线&amp;Hexo主题开发入门" /><published>2016-06-29T23:06:00+08:00</published><updated>2016-06-29T23:06:00+08:00</updated><id>https://xuanwo.org/2016/06/29/new-blog-new-life</id><content type="html" xml:base="https://xuanwo.org/2016/06/29/new-blog-new-life">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;曾经看过我的博客的同学大概都会发现，我的博客再一次大变样了~
这一次的更新其实酝酿了很久，早在刚开始用Hexo的时候就想着要有一个自己的主题。但是那个时候觉得这是一件很难的事情，要懂HTML，CSS，JavaScript，还要懂Swig，Ejs等模板语言，还要懂Hexo的内部原理，于是就一直搁置了。在独立实现了一个&lt;a href=&quot;https://xuanwo.org/2016/06/16/jade_ims/&quot;&gt;完整的项目&lt;/a&gt;之后，我认为自己已经有这样的能力了，于是决定正式开始。
在我看来的话，Hexo的使用者大概分为三个层次：第一种用别人的主题，第二种模仿现有的主题，第三种自己独立开发。我原来是第一种，在Next的基础上做了很多改动，这一次进入到了第二个层次。我找了一套自我感觉还不错的模板，然后套用它的CSS设定和页面结构，就成了我现在的主题。
利用两天学习和工作的闲暇时间，我大体上完成了这个主题。做得比较糙，很多细节还有待优化，但是我已经急不可耐地想要正式上线了，笑。在未来的话，我希望能把一些配置都能整理出来，优化一下代码，然后开源这个主题，希望大家能够喜欢~
庆祝的话已经说的差不多了，下面来讲一讲如何开发一个Hexo主题。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;结构&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;主题结构&lt;/h2&gt;

&lt;p&gt;Hexo主题的结构大体如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── _config.yml
├── languages
│   ├── default.yml
│   └── zh-Hans.yml
├── layout
│   ├── achieve.swig
│   ├── category.swig
│   ├── index.swig
│   ├── _layout.swig
│   ├── page.swig
│   ├── _partials
│   ├── post.swig
│   └── tag.swig
└── &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
    ├── css
    ├── fonts
    ├── img
    ├── js
    └── vendors
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;负责提供主题级别的配置，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;中通过&lt;code class=&quot;highlighter-rouge&quot;&gt;theme.xxx&lt;/code&gt;的形式进行调用。
然后&lt;code class=&quot;highlighter-rouge&quot;&gt;languages&lt;/code&gt;负责实现博客的i18N功能，如果博客没有多语言的需求，只需要实现一个&lt;code class=&quot;highlighter-rouge&quot;&gt;default.yml&lt;/code&gt;即可。
其次是最为重要的&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;文件夹，这个里面主要存放博客的结构，Hexo 引擎会使用指定的渲染引擎将&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;文件渲染成HTML页面。
最后是&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;，把所有主题需要用到的资源，比如CSS，Fonts，JS等都存放到这个文件夹中。&lt;/p&gt;

&lt;p&gt;这个主题使用了&lt;a href=&quot;http://paularmstrong.github.io/swig/&quot;&gt;swig&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;页面结构&lt;/h2&gt;

&lt;p&gt;页面结构分为两个维度，一者是我要呈现哪些页面，二者是每个页面上都有哪些内容。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;哪些页面？&lt;/h3&gt;

&lt;p&gt;作为一个博客，主要需要的页面有以下这些：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主页&lt;/li&gt;
  &lt;li&gt;单页&lt;/li&gt;
  &lt;li&gt;归档页面&lt;/li&gt;
  &lt;li&gt;分类页面&lt;/li&gt;
  &lt;li&gt;标签页面&lt;/li&gt;
  &lt;li&gt;文章页&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;哪些内容？&lt;/h3&gt;

&lt;p&gt;如果没有什么特别的设计，博客的页面大体上可以分为这几个部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;head：头部文件&lt;/li&gt;
  &lt;li&gt;body：主体内容
    &lt;ul&gt;
      &lt;li&gt;header：题图，导航栏等&lt;/li&gt;
      &lt;li&gt;content： 内容&lt;/li&gt;
      &lt;li&gt;footer：尾部的联系方式等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-6&quot;&gt;实现&lt;/h1&gt;

&lt;p&gt;前面讲到了 Hexo 的结构，下面来聊一聊具体的实现。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;原理&lt;/h2&gt;

&lt;p&gt;Hexo 渲染的入口是&lt;code class=&quot;highlighter-rouge&quot;&gt;_layout.swig&lt;/code&gt;，所以一个主题至少需要实现一个&lt;code class=&quot;highlighter-rouge&quot;&gt;_layout.swig&lt;/code&gt;。
然后Hexo会遍历Hexo目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;文件夹中的所有Markdown文件，根据Markdown文件所指定的layout进行渲染，默认类型为&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;技巧&lt;/h2&gt;

&lt;h3 id=&quot;layoutswig&quot;&gt;_layout.swig结构&lt;/h3&gt;

&lt;p&gt;整体的结构基本如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swig&quot; data-lang=&quot;swig&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    {% include '_partials/head.swig' %}
    &amp;lt;title&amp;gt;{% block title %}{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body id=&quot;home&quot;&amp;gt;
    {% include '_partials/menu.swig' %}
    &amp;lt;div id=&quot;wrap&quot;&amp;gt;
        {% include '_partials/nav.swig' %}
        {% include '_partials/header.swig' %}
        &amp;lt;div id=&quot;start&quot; class=&quot;container content&quot;&amp;gt;
            {% block content %}{% endblock %}
        &amp;lt;/div&amp;gt;
        {% include '_partials/footer.swig' %}
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-9&quot;&gt;实现文章渲染&lt;/h3&gt;

&lt;p&gt;这个地方主要是借鉴了NexT主题的设计，实现了一个swig的宏来生成对应的文章。这个宏主要有两个参数，第一个是post对象，第二个是是否为主页。如果是主页就只显示简略的内容，如果不是就输出全文。&lt;/p&gt;

&lt;p&gt;判断的部分实现如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swig&quot; data-lang=&quot;swig&quot;&gt;{% if is_index %}
    {% if post.excerpt %}
        {{ post.excerpt }}
        &amp;lt;a class=&quot;&quot; href=&quot;{{ url_for(post.path) }}&quot;&amp;gt;Read more&amp;lt;/a&amp;gt;
    {% endif %}
{% else %}
    {{ post.content }}
{% endif %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;用到的post页的参数可以&lt;a href=&quot;https://hexo.io/zh-cn/docs/variables.html&quot;&gt;我翻译的中文文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;分页插件&lt;/h3&gt;

&lt;p&gt;Hexo 自己实现了一个分页插件，直接使用paginator函数即可。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swig&quot; data-lang=&quot;swig&quot;&gt;{% if page.prev or page.next %}
    &amp;lt;nav class=&quot;pagination&quot;&amp;gt;
        {{ paginator({
            prev_text: '&amp;lt;i class=&quot;fa fa-angle-left&quot;&amp;gt;&amp;lt;/i&amp;gt;',
            next_text: '&amp;lt;i class=&quot;fa fa-angle-right&quot;&amp;gt;&amp;lt;/i&amp;gt;',
            mid_size: 1
        }) }}
    &amp;lt;/nav&amp;gt;
{% endif %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-11&quot;&gt;评论系统&lt;/h3&gt;

&lt;p&gt;对于Hexo来说，评论系统就是调用一个第三方的JS。所以只需要在合适的位置插入代码即可。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swig&quot; data-lang=&quot;swig&quot;&gt;&amp;lt;div id=&quot;disqus_thread&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    var disqus_config = function () {
        this.page.url = '{{ page.permalink }}';
        this.page.identifier = '{{ page.path }}';
    };
    (function () {
        var d = document, s = d.createElement('script');
        s.src = '//abc.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;section-12&quot;&gt;需要注意的坑&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;page.posts&lt;/code&gt;是按照时间排序的，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt;是无序的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-13&quot;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;Hexo 官方中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-14&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年06月30日 首次发布&lt;/li&gt;
&lt;/ul&gt;</content><category term="Hexo" /><category term="Blog" /><category term="HTML" /><category term="JavaScript" /><category term="Nodejs" /><summary type="html">前言</summary></entry><entry><title type="html">马可波罗珠宝进销存系统开发手记</title><link href="https://xuanwo.org/2016/06/16/jade_ims" rel="alternate" type="text/html" title="马可波罗珠宝进销存系统开发手记" /><published>2016-06-16T22:00:00+08:00</published><updated>2016-06-16T22:00:00+08:00</updated><id>https://xuanwo.org/2016/06/16/jade_ims</id><content type="html" xml:base="https://xuanwo.org/2016/06/16/jade_ims">&lt;p&gt;&lt;img src=&quot;/imgs/develop/jade-ims-index.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;这个项目从我们这个学期开了&lt;strong&gt;系统分析与设计&lt;/strong&gt;这门课之后就开始了，首次创建这个项目是在3月26号，实际上真正的开发时间集中在6月上旬。差不多用两个星期的闲暇时间时间完成了这个简单的进销存系统。这个系统基于Flask框架，使用SQLite3数据库，前端则是使用Bootstrap框架，实现了包括客户，库存，销售，进货等管理子系统。说是管理，其实也就是简单的增加和删除而已。
前人经常说，不要重复造轮子。既然有类似于Odoo这样强大的ERP系统珠玉在前，我为什么要再自己造一个功能简单，甚至根本不会有人用的轮子呢？从前我确实是这么想的，但是稍微有一点工作经验之后发现再造轮子的原因有两条：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为一个处在知识积累阶段的学生而言，再造轮子很有必要。不造一次轮子，你就永远不会明白轮子内部的真实构造。很多技术虽然看起来简单，但是想要有一个完善且健壮的实现却有很多坑需要踩。踩这些坑的过程，也正是一个技术人员成长最快的过程。&lt;/li&gt;
  &lt;li&gt;别人的轮子终究是别人的。你不知道这个轮子最大能承受多少压力，你也不知道这个轮子在什么样的情况下会爆胎。当一个轮子装上企业呼呼向前的列车，再要想把它替换下来是一件很难且成本很高的事情。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来，讲讲造这个轮子的一些经历吧~&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;项目启动&lt;/h1&gt;

&lt;p&gt;正如前言中说的，这个项目是系统分析与设计这门课的课程设计，也是贯穿着整个学期的一个主旋律。早在这学期开学之初，我们就知道了自己需要做这样的一个系统。经历了上个学期各种技术炫了半天，最后却只是抄袭各种开源项目草草实现的&lt;a href=&quot;https://xuanwo.org/2015/06/30/together-project/&quot;&gt;失败&lt;/a&gt;，这个学期我务实了很多。从最开始的讨论就一直跟组员强调技术的可行性，基本上否决了所有试图增大项目复杂度的建议，把主题定在了一个纯粹的进销存管理系统。之所以如此，是因为我的观念发生了很大的变化：原来觉得技术的先进是最重要的，开发项目一定要用最现代的技术，最炫目的特效；现在觉得哪怕是一个用VB写出来的能稳定运行的丑陋系统都要胜过采用了种种最新潮技术却漏洞百出根本没法运行的“先进”系统。
在讨论到最极端的时候，我甚至想只做一个仓库的管理系统，只包括进库和出库这样的简单功能。这样的态度曾经闹得有一次讨论直接不欢而散，好在组员都是非常Nice的人，在我主动表达歉意之后大度地表示没什么。经过多次讨论之后，我们终于达成了共识，要做一个进销存系统，功能尽可能简单，在实现基础功能的前提下，再考虑加入新的功能。
接下来的事情就没有什么大的分歧了，整体系统采用B/S架构，开发语言选用我个人比较喜欢的Python，使用Flask框架，数据库选用无需配置的SQLite。然后服务器选择阿里云的学生机，系统选择成熟稳定的CentOS 7.2，Web Server选用Nginx，也就是我个人目前比较喜欢的开发平台——LESP(Linux, Nginx, SQLite, Python)。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;项目细节&lt;/h1&gt;

&lt;p&gt;下面再介绍一下项目的细节。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;设计模式&lt;/h2&gt;

&lt;p&gt;项目大体上采用了MVC的思想，不过在具体的实现上并没有太过纠结于概念上的东西。所有的网页模板都在&lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt;文件夹下，静态资源都扔到了&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;目录，使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;模块来单独存放所有的数据库定义，然后所有的路由以及操作都在&lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt;中实现。对于我来说，快速地实现需求才是头等大事，是不是符合正统的MVC理念并不是十分重要。实际上现在这样的结构开发起来感觉也蛮顺手的，需要调整前端的样式和表单就在&lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt;文件夹下操作，需要修改程序的逻辑就去&lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt;，他们基本上是一一对应的关系。&lt;a href=&quot;https://spacewander.github.io/explore-flask-zh/4-organizing_your_project.html&quot;&gt;这里&lt;/a&gt;有更加清晰的讲解，值得一看。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;项目中的问题&amp;amp;解决方案&lt;/h2&gt;

&lt;h3 id=&quot;flaskflasksqlalchemy&quot;&gt;在Flask框架中同时使用蓝图与Flask_SQLAlchemy&lt;/h3&gt;

&lt;p&gt;https://segmentfault.com/q/1010000005640527&lt;/p&gt;

&lt;p&gt;&lt;em&gt;感谢@Ethan和@，他们强有力地向我证明了有师傅带路的好处。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这个问题纯粹是因为一直以来都是一个脚本Boy，没有系统性的学习过软件开发导致的。很显然，按照我原来的代码去产生实例，就会导致循环导入的错误。想要解决这样的问题，就需要使用工厂函数去生成实例，而不是自己去生成它。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;中添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;create_app()&lt;/code&gt;函数，在函数中进行参数配置，初始化和导入蓝图的操作：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'jade_ims.views.dashboard:dashboard'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.install:install'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.login:login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.sale:sale'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.customer:customer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.purchase.inputbill:inputbill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.purchase.supplier:supplier'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.stock.enterstockbill:enterstockbill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.stock.leavestockbill:leavestockbill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'jade_ims.views.stock.stock:stock'&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pyfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.py'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_blueprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;flask&quot;&gt;Flask如何优雅地重定向所有未登录用户到登陆界面&lt;/h3&gt;

&lt;p&gt;https://segmentfault.com/q/1010000005645821&lt;/p&gt;

&lt;p&gt;&lt;em&gt;感谢@zwillon和@igaozp&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;有一个Feature是想要把所有未登录的用户都重定向到登录页面。当时手头上的技术方案主要有两种：第一种是自己包装一个装饰器，并添加在每一个视图函数中；第二种是使用第三方库&lt;code class=&quot;highlighter-rouge&quot;&gt;Flask-Login&lt;/code&gt;，在视图函数中添加&lt;code class=&quot;highlighter-rouge&quot;&gt;@login_required&lt;/code&gt;。但是感觉姿势都不怎么优雅，因为我需要不断地在视图函数中添加这个装饰器，不太符合DRY(Don’t Repeat Yourself)准则。
SF的老司机给了我一个相当优雅的方案——Hook到app的&lt;code class=&quot;highlighter-rouge&quot;&gt;before_request&lt;/code&gt;方法。也就是这样来实现：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.before_request&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_need_login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 检查登录的逻辑&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我第一次是这样实现的：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.before_request&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_need_login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'logged_in'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login.user_login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样就带来了一个问题，对于未登录的用户来说，所有页面都会不断地重定向从而导致整个应用崩溃。因此还需要指定在某些情况下停止重定向，所以我们还需要修改一下&lt;code class=&quot;highlighter-rouge&quot;&gt;check_need_login&lt;/code&gt;的逻辑：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.before_request&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_need_login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'logged_in'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endpoint&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login.user_login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'static'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login.user_login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;中没有&lt;code class=&quot;highlighter-rouge&quot;&gt;logged_in&lt;/code&gt;字段且&lt;code class=&quot;highlighter-rouge&quot;&gt;endpoint&lt;/code&gt;不是&lt;code class=&quot;highlighter-rouge&quot;&gt;user_login&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;的时候就重定向到登录页面，这样就比较优雅地解决了重定向未登录用户到登陆界面的需求。&lt;/p&gt;

&lt;h3 id=&quot;flasksqlalchemy-&quot;&gt;flask_sqlalchemy 插入数据时发生错误后如何处理&lt;/h3&gt;

&lt;p&gt;https://segmentfault.com/q/1010000005647431&lt;/p&gt;

&lt;p&gt;在实际开发的过程中发现，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;db.session&lt;/code&gt;中添加的记录有问题，在commit的时候会出现一个报错。所以我们需要在出错的时候进行一些处理，以保证程序出错之后还能够正常地运行。网友 @学不会编程的永仲 给出的回答是我应该在form中验证数据的正确性。虽然我相信他的理解可能是正确的，但是不太符合我的哲学，我更加倾向于&lt;strong&gt;让它崩溃，然后处理异常&lt;/strong&gt;而不是&lt;strong&gt;事先处理好所有的错误&lt;/strong&gt;。
通过查阅文档，了解到&lt;code class=&quot;highlighter-rouge&quot;&gt;db.session.rollback()&lt;/code&gt;这一函数可以在出错是进行回滚，于是最后的实现变成了这样：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@supplier.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/purchase/supplier/add'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_supplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'supplier_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'supplier_constract'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'supplier_phone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'supplier_address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'supplier_remark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'供应商添加成功！'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'输入不合法，请重新输入！'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'danger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'supplier.list_supplier'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-5&quot;&gt;项目总结&lt;/h1&gt;

&lt;p&gt;随着答辩的完成，这个项目进入了尾声。因为很多东西需要去学习，有新的东西需要去探索，所以这个项目也很有可能不会再继续维护了。那么这个项目开源出来的价值在哪里呢？我想，这个项目虽然简单，但它毕竟还算是一个完整的Flask项目，除了&lt;code class=&quot;highlighter-rouge&quot;&gt;flask_sqlalchemy&lt;/code&gt;之外没有多余的依赖，非常适合一个跟我一样的Python初学者进行入门学习。如果说有人能够因为这个项目少走一些弯路，少在一些死胡同浪费时间，我想这个项目的价值就已经实现了。如果再往大一点来说，开源的价值也就实现了。
如果要我自评的话，我觉得这样的项目应该有60分。之所以给一个及格分，是因为这个项目毕竟实现了需求的大多数功能，也有好好地跑在阿里云的服务器上。丢分的话，大体上是因为这个项目毫无注释，没有安装文档，也没有配置手册，很多东西都是硬编码到了代码中。不仅如此，编程的风格也是相当的不佳，在模板部分缺乏良好的顶层设计，出现了大量的重复代码。这些问题希望自己能在下一个项目中得到一些改善。
Anyway，随着这个项目的结束，我的大三生涯也要结束了。接下来是波澜壮阔的实习阶段，希望自己能够在实习的时候多踩一些坑，多走一些弯路，多
得到一些来自“长者”的指点。&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;参考资源&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.jinkan.org/docs/flask/&quot;&gt;Flask 中文文档 &lt;em&gt;文档略有过时，代码以Github上为准&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spacewander.github.io/explore-flask-zh/index.html&quot;&gt;Flask 之旅&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.jinkan.org/docs/flask-sqlalchemy/index.html&quot;&gt;Flask-SQLALchemy 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-7&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年06月17日 首次发布&lt;/li&gt;
&lt;/ul&gt;</content><category term="项目" /><category term="Python" /><category term="Flask" /><category term="Information" /><category term="HTML" /><category term="JavaScript" /><summary type="html"></summary></entry><entry><title type="html">在QingCloud上部署弹性扩容的OwnCloud</title><link href="https://xuanwo.org/2016/06/03/owncloud-on-qingcloud" rel="alternate" type="text/html" title="在QingCloud上部署弹性扩容的OwnCloud" /><published>2016-06-03T08:00:00+08:00</published><updated>2016-06-03T08:00:00+08:00</updated><id>https://xuanwo.org/2016/06/03/owncloud-on-qingcloud</id><content type="html" xml:base="https://xuanwo.org/2016/06/03/owncloud-on-qingcloud">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;因为实在不满意百度云的一些缺陷，我们最终决定部署一套团队内部使用的云存储平台，用于团队协作及资料长期存储。希望能够达到如下目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据安全性高&lt;/li&gt;
  &lt;li&gt;权限控制能力强&lt;/li&gt;
  &lt;li&gt;分享功能更强，可以设置密码和过期时间等&lt;/li&gt;
  &lt;li&gt;允许匿名第三方上传数据&lt;/li&gt;
  &lt;li&gt;没有文件上传大小限制&lt;/li&gt;
  &lt;li&gt;支持多平台同步功能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综合考量各开源项目之后，我最终选定基于QingCloud部署一套开源存储项目OwnCloud。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;部署&lt;/h1&gt;

&lt;p&gt;在部署之前，我们首先要考虑这套系统大概会有多少人用，会使用多大的空间，需要多少带宽，服务器的配置等问题。我们现在有几个TB的数据，10人使用，未来人数无法预估，各资源使用量也无法预估。但是非常有意思的事情是，在青云QingCloud平台上，一切都是可以动态扩容的，所以我完全可以以最少的资源验证服务是否符合需求，然后再增加服务所使用的资源。&lt;/p&gt;

&lt;p&gt;整个部署过程概括为如下4步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;验证功能及预估花费&lt;/li&gt;
  &lt;li&gt;在QingCloud上创建主机、网络等资源并修改配置&lt;/li&gt;
  &lt;li&gt;安装OwnCloud环境&lt;/li&gt;
  &lt;li&gt;使用LVM管理分区，实现空间动态扩容&lt;/li&gt;
  &lt;li&gt;在网页端安装OwnCloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;资源编排&lt;/h2&gt;

&lt;p&gt;在实际生成需要的资源之前，我先通过青云QingCloud的提供的资源编排功能看看青云是否能够满足我们的需求以及搭建这一套服务需要多少钱：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，我们在一个私有网络中创建一台主机和一个数据库，并为整个VPC网络分配了一个公网IP和防火墙。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-tp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图，整套资源预计需要每小时0.56元。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;创建并修改配置&lt;/h2&gt;

&lt;p&gt;生成模板之后，点击创建。等待大概一分钟之后，所有资源全部创建完毕。在SSH连接上服务器开始实际的配置工作之前，需要先修改VPC的设置。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;添加端口转发规则&lt;/h3&gt;

&lt;p&gt;我需要将来自公网的流量转发到我的主机上，主要有两条，一个是SSH，一个是HTTP。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主机的内网地址是&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.0.2&lt;/code&gt;，所以需要把所有来自22和80的端口都转发到这个地址。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;添加防火墙规则&lt;/h3&gt;

&lt;p&gt;出于安全性考虑，青云的防火墙默认只开放了22和ICMP。为了可以正常访问到主机，还需要添加80端口的例外规则：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们看到青云在右边提供了常用端口的配置，选择http即可。&lt;/p&gt;

&lt;h2 id=&quot;owncloud&quot;&gt;安装OwnCloud&lt;/h2&gt;

&lt;p&gt;OwnCloud为CentOS平台提供了二进制的包，没有特殊需求的话，直接使用即可。
首先添加OwnCloud官方的Key文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rpm --import https://download.owncloud.org/download/repositories/stable/CentOS_7/repodata/repomd.xml.key
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后添加OwnCloud的repo：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://download.owncloud.org/download/repositories/stable/CentOS_7/ce:stable.repo -O /etc/yum.repos.d/ce:stable.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更新repo之后开始安装：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum clean expire-cache
yum install owncloud
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;yum将会自动处理依赖，如果速度不佳的话，可以直接将包下载到本地：&lt;a href=&quot;http://download.owncloud.org/download/repositories/stable/CentOS_7/&quot;&gt;直接下载&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpd&quot;&gt;启用httpd，并测试是否安装正确&lt;/h2&gt;

&lt;p&gt;OwnCloud默认使用Apache作为Web服务器，上一步已经安装了Apache，接下来需要启用它：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start httpd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如需要开机自行启动，可以输入：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;httpd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在浏览器中访问：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;your ip&amp;gt;/owncloud&lt;/code&gt;，如果出现OwnCloud的安装界面，说明已经配置成功了。&lt;/p&gt;

&lt;h2 id=&quot;lvm&quot;&gt;使用LVM管理分区，实现空间动态扩容&lt;/h2&gt;

&lt;p&gt;OwnCloud在安装的时候只能选择一个目录，为了能够实现空间的动态扩容，需要使用LVM创建一个逻辑分区并挂载到指定的数据目录下。&lt;/p&gt;

&lt;p&gt;首先在青云QingCloud的控制台中创建一块硬盘，然后挂载到主机中。之后，就能够通过&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sdb&lt;/code&gt;等形式来访问这块硬盘。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意的是，主机在每次重启的时候硬盘的顺序可能会发生改变，所以如果需要自动挂载的话，需要使用UUID或者LABLE的方式来指定硬盘，不能使用设备名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来需要在CentOS下使用LVM来配置分区，实现分区的动态扩容。&lt;/p&gt;

&lt;h3 id=&quot;lvm-1&quot;&gt;安装LVM工具&lt;/h3&gt;

&lt;p&gt;青云QingCloud提供的CentOS 7.2默认映像是没有LVM工具的，所以首先需要安装它：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install lvm2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pv&quot;&gt;创建物理卷（PV）&lt;/h3&gt;

&lt;p&gt;首先检测能够被作为物理卷的设备：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lvmdiskscan
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在指定设备上创建物理卷，所有需要用到的设备都需要执行如下命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pvcreate /dev/sdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后查看已经创建好的物理卷：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pvdisplay
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出大概如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- Physical volume ---
 PV Name               /dev/sdb
 PV Size               1000.00 GiB / not usable 4.00 MiB
 Allocatable           yes
 PE Size               4.00 MiB
 Total PE              255999
 Free PE               255999
 Allocated PE          0
 PV UUID               EHIeTJ-WBPv-rQkQ-LnuI-0IWE-SM4z-bMPAWx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;vg&quot;&gt;创建卷组（VG）&lt;/h3&gt;

&lt;p&gt;物理卷创建完毕后，需要创建一个卷组来实现物理卷的统一管理：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vgcreate owncloud-vg /dev/sdb /dev/sdc /dev/sdd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后续如果需要扩展的话，可以使用如下命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vgextend owncloud-vg /dev/sde
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样地，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vgdisplay&lt;/code&gt;来查看创建好的卷组：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- Volume group ---
 VG Name               owncloud-vg
 Format                lvm2
 Metadata Areas        1
 Metadata Sequence No  2
 VG Access             &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;/write
 VG Status             resizable
 MAX LV                0
 Cur LV                1
 Open LV               1
 Max PV                0
 Cur PV                1
 Act PV                1
 VG Size               1000.00 GiB
 PE Size               4.00 MiB
 Total PE              255999
 Alloc PE / Size       230400 / 900.00 GiB
 Free  PE / Size       25599 / 100.00 GiB
 VG UUID               xCCtSR-QFcZ-StcI-HM7O-KDAz-PvMC-EgYcSV
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;lv&quot;&gt;创建逻辑卷（LV）&lt;/h3&gt;

&lt;p&gt;然后就可以开始创建逻辑卷了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lvcreate -L 900G owncloud-vg -n owncloud-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建完毕后，就可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/owncloud--vg-owncloud--data&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/owncloud-vg/owncloud-data&lt;/code&gt;来访问这个设备了。&lt;/p&gt;

&lt;p&gt;如果需要扩大逻辑卷，可以使用：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lvextend -L 1000G /dev/owncloud-vg/owncloud-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;确认扩展成功后，再更新文件系统：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resize2fs /dev/owncloud-vg/owncloud-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;创建文件系统并挂载&lt;/h3&gt;

&lt;p&gt;在逻辑卷上创建一个ext4分区：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkfs.ext4 /dev/mapper/owncloud--vg-owncloud--data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后将分区挂载到期望的目录下，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount /dev/mapper/owncloud--vg-owncloud--data /data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;修改文件夹权限&lt;/h2&gt;

&lt;p&gt;为了OwnCloud能够正确读写数据分区，需要修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt;的所有者和权限：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chown -R apache:apache /data
chmod 775 /data -R
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;owncloud-1&quot;&gt;网页安装OwnCloud&lt;/h2&gt;

&lt;p&gt;全部配置完毕后，可以开始在网页进行OwnCloud安装了。&lt;/p&gt;

&lt;p&gt;管理员帐号： 自定义
管理员密码： 自定义
数据路径：&lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt;
数据库用户：&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;
数据库密码：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;your password&amp;gt;&lt;/code&gt;
数据库名称自定义，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;owncloud&lt;/code&gt;
数据库地址：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;your rdb ip&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在创建RDB时，系统会自动用相同的密码创建Root用户。OwnCloud在安装时需要创建一个新的账户来进行管理，而青云提供的默认用户没有这样的权限。因此需要使用Root用户而不是创建时指定的用户。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;提示创建完毕后，就可以使用管理员用户登陆了。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;维护&lt;/h1&gt;

&lt;h2 id=&quot;section-9&quot;&gt;自动备份&lt;/h2&gt;

&lt;p&gt;一个存储类的应用，必须要有自动备份的功能，保证用户在最坏的情况下都能找回他们的数据，对于存储着工作资料的私有云存储而言更是如此。所以，需要对主机，硬盘和数据库进行定时备份。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;主机和硬盘&lt;/h3&gt;

&lt;p&gt;青云QingCloud 提供了一个叫定时器的功能，可以设置在每天的三点重复执行备份任务。&lt;/p&gt;

&lt;p&gt;首先创建一个定时器，每天3：00重复执行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-backup-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在该定时器中添加对应的定时器任务：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-backup-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选中需要备份的主机和硬盘即可。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;数据库&lt;/h3&gt;

&lt;p&gt;青云QingCloud 上的数据库自带自动备份功能，只需要开启它。&lt;/p&gt;

&lt;p&gt;在需要备份的数据库上右击，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;修改自动备份策略&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-backup-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;青云QingCloud 首次备份是全量备份，之后是增量备份。当变化较大时，会自动创建新的备份链。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-12&quot;&gt;自动伸缩&lt;/h2&gt;

&lt;p&gt;云存储服务的一个最显著的特点是有明显的高峰期，如果能够实现高峰期时自动增加带宽，低峰期时自动降低带宽就能够节省昂贵的带宽费用的目的。青云QingCloud提供的自动伸缩就能有效地满足这一痛点。&lt;/p&gt;

&lt;p&gt;首先创建一个自动伸缩策略：&lt;/p&gt;

&lt;p&gt;操作类型为调整公网IP带宽上限，然后选择需要自动伸缩的资源。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-autoscaling-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后添加带宽提高和降低的触发条件：&lt;/p&gt;

&lt;p&gt;以带宽提高为例，我们可以在公网进流量连续15分钟平均值大于当前带宽的80%时提高带宽。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;青云QingCloud的监控周期为5分钟，而数据采样周期为1分钟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-autoscaling-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后添加操作参数：&lt;/p&gt;

&lt;p&gt;可以设置每次提高5Mbps，最高允许的带宽为20Mbps。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-autoscaling-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;硬盘扩容&lt;/h2&gt;

&lt;p&gt;硬盘扩容有两种方式，第一是硬盘自身的纵向扩容，提升硬盘的大小；第二是硬盘数量的横向扩容，提升硬盘的个数。下面分别讲一讲。&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;纵向扩容&lt;/h3&gt;

&lt;p&gt;首先暂停服务：&lt;/p&gt;

&lt;p&gt;进入 Owncloud 所在文件夹，修改&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt;文件夹下的&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;文件，将&lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt;修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。这样 Owncloud 就会进入维护模式，从而防止在扩容期间出现意外的数据丢失。&lt;/p&gt;

&lt;p&gt;然后从系统中卸载数据盘：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;umount /data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以在青云的控制台中卸载这块磁盘，并执行扩容操作。&lt;strong&gt;一定要先在系统中卸载，再在青云的控制台中卸载，否则会出现不可恢复的数据丢失。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;等到青云提示扩容完成后，再将这块盘挂载到主机上，并执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pvresize /dev/sdx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来自动探测设备当前大小并将物理卷扩展到其最大容量&lt;/p&gt;

&lt;p&gt;之后就可以扩容逻辑卷的大小了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lvextend -l 100%VG owncloud-vg/owncloud-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个命令会将这个VG的所有空间分配到我们的LV当中。&lt;/p&gt;

&lt;p&gt;然后将这个逻辑卷挂载到我们的数据分区：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount /dev/mapper/owncloud--vg-owncloud--data /data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们需要让文件系统也检测到空间的变更：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resize2fs /dev/mapper/owncloud--vg-owncloud--data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，空间扩容完毕，可以再将&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;maintenance&lt;/code&gt;修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;，开始正常对外提供服务。&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;横向扩容&lt;/h3&gt;

&lt;p&gt;横向扩容相对比较简单一些。&lt;/p&gt;

&lt;p&gt;首先将Owncloud置于维护模式，然后在青云的控制台上创建一块新的盘挂载到系统中，然后执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pvcreate /dev/sdx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以将这个卷转换为一个物理卷。&lt;/p&gt;

&lt;p&gt;之后就可以将这个物理卷加入到一个VG中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vgextend owncloud-vg /dev/sdx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之后的操作跟纵向扩容相似，扩大LV，重新挂载，更新文件系统，退出维护模式等，不再赘述。&lt;/p&gt;

&lt;h1 id=&quot;section-16&quot;&gt;应用&lt;/h1&gt;

&lt;p&gt;下面来聊一聊OwnCloud的一些应用。&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;分享功能&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分享功能是我比较看重的一个部分。OwnCloud的分享可以选择用户和组，然后还能通过链接进行分享。通过链接分享时，可以指定密码和过期时间，还能允许编辑。这样就可以实现给用户发送需要的资料以及收集来自合作伙伴的视频，文件等功能。&lt;/p&gt;

&lt;h2 id=&quot;section-18&quot;&gt;团队协作&lt;/h2&gt;

&lt;p&gt;OwnCloud内建了一个版本管理功能，同一个文件可以提供多个历史版本，这样方便大家进行版本追溯和管理，为团队协作编辑提供了便利。除此以外还有评论系统，实时性能还不错，基本可以用于对具体文档的简单协作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/opinion/qingcloud-owncloud-show-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-19&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年06月03日 首次发布&lt;/li&gt;
  &lt;li&gt;2016年06月11日 增加自动备份和自动伸缩的配置&lt;/li&gt;
  &lt;li&gt;2016年08月20日 增加了硬盘空间的横向与纵向扩容&lt;/li&gt;
&lt;/ul&gt;</content><category term="QingCloud" /><category term="Software" /><category term="Work" /><summary type="html">前言</summary></entry><entry><title type="html">我从Qingchat中学到的教训</title><link href="https://xuanwo.org/2016/05/30/learn-from-qingchat" rel="alternate" type="text/html" title="我从Qingchat中学到的教训" /><published>2016-05-30T04:57:00+08:00</published><updated>2016-05-30T04:57:00+08:00</updated><id>https://xuanwo.org/2016/05/30/learn-from-qingchat</id><content type="html" xml:base="https://xuanwo.org/2016/05/30/learn-from-qingchat">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;之前的一段时间一直在从事&lt;a href=&quot;https://github.com/Xuanwo/qingchat&quot;&gt;Qingchat&lt;/a&gt;的相关开发工作，这个项目是一个基于Mojo-Weixin提供的Rest API开发的一个微信机器人，承担了十余个群，上千人的微信直播活动。秉承着ACM训练出来的“暴力加乱搞”风格，我花了大概一个星期的课余时间，搞出了一个可用的版本。期间也迭代了很多次，既欣慰于Coding的力量，也苦恼于当初设计的不完善带来的种种问题。在这个项目即将大规模重构的前夕，我总结一下开发Qingchat的过程中的经验教训，希望自己能成为一个更好更聪明的Coder。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;经验教训&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;没有稳定性的世界&lt;/h2&gt;

&lt;p&gt;从最开始Coding的时候，就有着一个根深蒂固的信念：计算机不会出错。1是1，0是0，只要自己的实现是对的，那最后的结果也一定是对的。然后，真相并非如此：我们存在于一个没有稳定性的世界。
你访问的路径可能是不存在的，你访问的文件可能是不存在或者已经上锁，你期望的服务器响应因为网络环境太差变成了超时。不仅如此，有时候你还会遇到神出鬼没的黑客们，稍有不慎你可能就永远失去了对数据的掌控权（&lt;em&gt;我测试用的服务器被人暴力尝试登陆34万次&lt;/em&gt;）。
所以我们在编程的时候就应当完全抛弃“这个服务是稳定的”这种前提，学会在万物皆有可能出错的假设下编程，不要轻视程序的鲁棒性。你永远都不会知道用户会以何种方式使用你的程序，同样的，你也不会知道用户到底会输入什么样的数据。灵活运用“防御式编程”和“让它出错”两种思想，让你的代码更健壮。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;拥抱多线程，走向非阻塞&lt;/h2&gt;

&lt;p&gt;现在回过头来看，自己当初实现的群发功能就是一个彻头彻尾的失败品：容错性差，效率低下。这些问题其实是由同一个原因导致的：我使用了一个单线程阻塞式的实现，不仅如此，还没有做任何异常的处理。这样导致的结果就是只要某个环节出错，整个群发任务就会直接退出。速度是跟微信群的数量成正比的，群的数量上升之后，群发速度过慢成了我的同事们经常向我吐嘈的问题。
开发的时候不计算网络传输延时绝对是一个重大失误——实际上，网络延时是整个系统的关键瓶颈。为了解决这个问题，Node.js 采用了一种单线程非阻塞的设计（一家之言，轻喷）。对于Python来说也是一样的，适度地拥抱多线程开发以提高并行效率，多采用非阻塞式设计以避免单个任务执行时间过长拖慢运行速度。
在一次去上课的路上，我形象地把这种设计比作“射后不管”，好像是飞毛腿导弹？&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;开源非万能&lt;/h2&gt;

&lt;p&gt;我原来是一个开源的死忠粉，认为开源可以解决一切问题，那个时候每天思考的问题就是为什么Windows不开源？等到真的进入业界，才明白自己的这种想法有多么幼稚。
除去那些大型的有基金会在背后支撑的项目，绝大多数项目完全依靠开发者个人热情来维持，某些涉及到商业支持的项目更是存在着“人走项目死”的现象。比如我参与管理的&lt;a href=&quot;https://github.com/hexojs&quot;&gt;Hexo&lt;/a&gt;项目在作者tommy开始实习之后就进展缓慢，再比如我接手但是现状非常差的&lt;a href=&quot;https://github.com/staticfile/static&quot;&gt;staticfile&lt;/a&gt;（&lt;em&gt;很抱歉我并没有能够做出什么正面的贡献，反而让状况变得更加糟糕了&lt;/em&gt;）。
这些实践都告诉我，开源并不是万能的，真正想要解决一个问题，需要一个完善的制度以及各方面的激励机制。单纯依赖于开发者个人的热情往往不利于一个项目的长远发展，而在自行开发的项目中依赖于一个开源项目往往会带来更多的风险。开发者不一定会开发你期望的功能，开发者也不一定会按照你期望的进度进行开发。
作为我个人，我依然是一个热爱开源项目，崇尚开源理念的人；然而作为一个产品的开发者，一个服务的提供者，你必须权衡自行开发，采购商业产品以及使用开源项目之间的利弊。不同的选择取决于不同的项目，不同的需求，不同的自主开发能力，不同的后续维护能力。一味的强调开源理念，不顾实际，往往对开源事业的发展有害无益，挫伤人们对开源的信赖。&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;未来展望&lt;/h1&gt;

&lt;p&gt;一个项目最具活力与激情的时刻就是在设计之初实现之前，等到实现的时候往往寸步难行，到了后续维护的时候时常想就此了断。我希望这个项目能够存活更长的时间，希望自己向同事们提出的构想都能够一一变为现实。本次重构希望能够实现一个更加稳定更加高效的Qingchat，希望能够进一步减少重复劳动，提高效率。
最后感谢同事们的不杀之恩，感谢青云QingCloud的自由空间，可以允许我以自己想要的方式完成工作。最后以青云CTO Reno在某次会上说的话自勉：“你们是青云的Devloper，No excuse。”&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年05月30日 初稿&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python" /><category term="qingchat" /><category term="实习" /><category term="QingCloud" /><summary type="html">前言</summary></entry><entry><title type="html">基于MSP430G2553的打铃系统开发手记</title><link href="https://xuanwo.org/2016/05/09/msp430g2553-bellring" rel="alternate" type="text/html" title="基于MSP430G2553的打铃系统开发手记" /><published>2016-05-09T08:42:00+08:00</published><updated>2016-05-09T08:42:00+08:00</updated><id>https://xuanwo.org/2016/05/09/msp430g2553-bellring</id><content type="html" xml:base="https://xuanwo.org/2016/05/09/msp430g2553-bellring">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;我萌萌哒的妹纸是一个代码苦手，完全无法理解 C 语言，所以每一次到单片机上机需要交作业的时候都是愁眉苦脸的样子。而我又总是因为自己确实不懂单片机里面的种种奇怪定义（中断，串口，P1.x 之类），所以也一直没有什么好办法去帮她。这一次的作业对编码能力要求较高，但是涉及到的硬件比较少，于是决定以此为契机，开始我的嵌入式开发之旅。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;需求&lt;/h1&gt;

&lt;p&gt;这次的如下：&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基本要求&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;基本计时和显示功能(用 12 小时制显示)。
包括上下午标志,时、分的数字显示,秒信号指示。&lt;/li&gt;
  &lt;li&gt;能设置当前时间(含上、下午,时,分)&lt;/li&gt;
  &lt;li&gt;能实现基本打铃功能,规定:
上午 6:00 起床铃;打铃 5 秒、停 2 秒、再打铃 5 秒。
下午 10:30 熄灯铃;打铃 5 秒、停 2 秒、再打铃 5 秒。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;铃声可用 LED 灯光显示,如果实验装置没有 LED 发光管,可以用七段显示管的小数点显示,也可以用显示小时的十位数码管的多余段显示。凡是用到铃声功能的均可如此处理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;发挥部分&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;增加整点报时功能,整点时响铃 5 秒,要求有控制启动和关闭功能。&lt;/li&gt;
  &lt;li&gt;增加调整起床铃、熄灯铃时间的功能。&lt;/li&gt;
  &lt;li&gt;增加调整打铃时间长短和间歇时间长短的功能。&lt;/li&gt;
  &lt;li&gt;增设上午 4 节课的上、下课打铃功能,规定:
7:30 上课,8:20 下课;8:30 上课,9:20 下课;9:40 上课,10:30 下课;10:40 上课,11:30 下课;每次铃声 5 秒。&lt;/li&gt;
  &lt;li&gt;利用板上按键做一个 12 小时/24 小时的显示格式切换&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;分析&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;既然我都出动了，肯定不能满足于只完成基本要求，决定把所有功能全都完整的实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单的来说，整体需求可以分为三个部分：显示，打铃，修改。&lt;/p&gt;

&lt;p&gt;需要用到的东西有：串口，指示灯和一个按键。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;显示&lt;/h2&gt;

&lt;p&gt;遵循简单的前后端分离的思想，我们可以使用三个全局变量 hour ， minute ， second 来存储当前的时间，只需要在显示的时候区分上下午和 12 小时／ 24 小时即可。这两个部分解耦之后会发现，我们后面的利用板上按键修改显示格式也变得容易了很多。
通过串口显示也就是需要向指定变量发送字符，将这个功能抽象并封装之后，对于我后续的编程来说，也就是调用一下 Send_Str(str) 的过程。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;打铃&lt;/h2&gt;

&lt;p&gt;打铃是这套系统的重头戏，因为学校方面的资源限制，所以使用指示灯示意的方法来代替打铃。
指示灯的亮灭是通过控制一个变量的值来确定的，于是我只要在正确时候设置正确的值，打铃系统就能按照我期望的方式工作。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;修改&lt;/h2&gt;

&lt;p&gt;修改同样是通过串口进行的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在最开始的设计文档中，本来是要求使用4个按键来进行设计，也就是说跟一个普通的电子表差不多。但是非常因缺思艇的事情是学校的按键不够了，所以老师要求所有功能都用串口实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;跟显示有些不同的地方是，通过串口向芯片发送数据需要正确使用串口中断。&lt;/p&gt;

&lt;p&gt;综上，这个系统所需要的全部内容就已经实现了。可以看到我做了很多将对硬件的操作抽象化的处理，其实这一点非常重要。因为对于我来说，嵌入式开发最大的难题在于，我不知道里面种种变量的含义，不知道如何操作具体的硬件。将硬件操作抽象化处理之后，我就可以很方便地开展我的后续开发。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;问题&lt;/h1&gt;

&lt;p&gt;实现就不再赘述了，想必读者一定都比我强，下面聊一聊遇到的问题以及 debug 的经历。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;串口配置&lt;/h2&gt;

&lt;p&gt;串口的收和发其实是分开的，这里用到了两个变量： UCA0TXBUF ， UCA0RXBUF 。从字面意思上可以看出，前一个用于发送，后一个用于接收（相对于开发者来说）。发送和接收其实就是给这两个值赋值的过程，看起来这两个变量在接受到值之后会将这个值传给别的变量，所以只要不断的将值赋给它就行，我们写了这样的函数：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#pragma vector=USCIAB0RX_VECTOR //中断服务函数
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__interrupt&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0RXBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//读取到缓冲区
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;strtmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strtmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//切换模式
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//发送字符
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Send_Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFG2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0TXIFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCA0TXBUF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//发送字符串
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Send_Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFG2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0TXIFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCA0TXBUF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Send_Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Send_Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;uart 貌似是一个内置的中断函数，用来处理串口的接收，只要将变量 UCA0RXBUF 的值存储起来即可；后面的 Send_Str 就非常好理解了，将值发送给 UCA0TXBUF ，从而实现串口的输出。&lt;/p&gt;

&lt;p&gt;思路如此清晰，但是测试的时候却遇到了问题，我们的输出是空的，转为16进制显示后，全都是0x00。这个问题调试了很久，拿着原来的代码逐行比对之后发现，出了这样的问题：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0BR0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0BR1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0BR0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UCA0BR1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Google 一下才明白，原来 UCA0BR0 和 UCA0BR1 是由系统的时钟速度和波特率决定的值，如果设置错误就会导致串口发送失败。具体的值可以参考&lt;a href=&quot;http://www.ti.com/lit/ug/slau144j/slau144j.pdf&quot;&gt;用户手册&lt;/a&gt;， Ctrl＋F 搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;Table 15-4. Commonly Used Baud Rates&lt;/code&gt; 即可。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;串口输出异常&lt;/h2&gt;

&lt;p&gt;前面提到我们直接使用三个变量保存当前时间，在输出时做进一步处理，转为字符串的过程中，我们进行了这样的操作：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但有趣的事情是，在初始化之后，我们得到的输出是这样的： &lt;code class=&quot;highlighter-rouge&quot;&gt;0/:0/:0/&lt;/code&gt; 。随手输出了一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; 的 ASCII 码，发现它刚好比 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 小一。&lt;/p&gt;

&lt;p&gt;难道说，存储器中的默认值不是 0 吗？ Google 一下之后发现，还真的不是 0 。 MSP430G2553 中的 Flash 存储器在默认状态下的值全为 1 ，然后写入时只能将 1 置为 0 ，所以每一次写入数据都需要先清空再写入。那么问题来了，为什么全为 1 会导致最后输出的结果小 1 呢？我来简单的阐述一下我的理解：&lt;/p&gt;

&lt;p&gt;假设这个存储器只有 8 位，也就是说，现在的值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;11111111&lt;/code&gt; ，然后我加上一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; ，于是我们得到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  11111111
+        1
 100000000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显然，我们最后的结果已经移除了，此时会产生截断，也就是说，存储器现在的数据变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;00000000&lt;/code&gt; ，也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;，跟我们期望的结果 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; 刚好相差一。&lt;/p&gt;

&lt;p&gt;当然，实际的情况要比我上面的举例要复杂的多，不过我想已经足够我们认识到这个 BUG 的本质，就不再多说啦。&lt;/p&gt;

&lt;h2 id=&quot;flash-&quot;&gt;Flash 存储器未清空&lt;/h2&gt;

&lt;p&gt;在测试中，我们发现每一次烧录程序之后， Flash 存储器不会清空，依然会从上一次我们保存的时间开始计时。我觉得这是正确的行为，没有在意，但是我妹纸和她的队友告诉我她们在完成上一个作业的时候每次都是会清空的。我对着这次和上次的代码研究了很久，认为代码里面根本就没有清空 Flash 存储器的操作，如果有的话，掉电保存这项功能根本无从谈起。我妹纸她们也同意我的分析，但是她们的实践确实证明了每次都会清空 Flash 存储区。&lt;/p&gt;

&lt;p&gt;这个问题也困扰了很久，直到第二天，用别人的电脑重新烧录了一遍程序，发现他们的是会正常清空的。所以说，问题在于 CCS 的版本：我妹纸使用的 CCS 版本是 6.1 ，而
他们用的版本是 5.1.1 ，也就是说，不同版本的 CCS 在烧录程序期间的不同行为导致了这次错误。我们换用了 5.1.1 之后，成功解决了这个问题。&lt;/p&gt;

&lt;h1 id=&quot;section-11&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;对嵌入式开发有了初步的了解，向着真·全栈开发工程师又近了一步。&lt;/p&gt;

&lt;p&gt;这一次的开发经历遇到了很多因缺思艇的问题，因为嵌入式开发本身比较偏向底层，这次开发甚至还遇到了存储器的存储原理。也有一点将自己看的 CSAPP 融会贯通的感觉，还是很有意思的。&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年05月09日  首次发布&lt;/li&gt;
&lt;/ul&gt;</content><category term="单片机" /><category term="C" /><summary type="html">前言</summary></entry><entry><title type="html">Gitlab部署和汉化以及简单运维</title><link href="https://xuanwo.org/2016/04/13/gitlab-install-intro" rel="alternate" type="text/html" title="Gitlab部署和汉化以及简单运维" /><published>2016-04-13T23:20:00+08:00</published><updated>2016-04-13T23:20:00+08:00</updated><id>https://xuanwo.org/2016/04/13/gitlab-install-intro</id><content type="html" xml:base="https://xuanwo.org/2016/04/13/gitlab-install-intro">&lt;h1 id=&quot;section&quot;&gt;起因&lt;/h1&gt;
&lt;p&gt;在跟网络中心的老师沟通成立镜像站的相关事宜的时候，意外地接下来搭建一套校内的 Git 服务的任务。
&lt;a href=&quot;https://imnerd.org/&quot;&gt;@怡红公子&lt;/a&gt; 曾经搭建过一套类似的服务，但由于服务器端没有开启 VT 虚拟化导致不能安装 64 位的操作系统，再加上 Gitlab 不提供 32 位的安装包，所以长期以来怡红公子一直都是自行编译并配置 Gitlab 。考虑到后续维护的方便，我们决定趁着这个机会使用另一台支持安装 64 位操作系统的服务器，一劳永逸地解决这个问题。
我们的服务器环境是 &lt;strong&gt;CentOS 7.2 64bit&lt;/strong&gt; ，以下所有操作均以此为基准。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;gitlab-&quot;&gt;Gitlab 安装&lt;/h1&gt;

&lt;p&gt;推荐使用 &lt;a href=&quot;https://about.gitlab.com/downloads&quot;&gt;Install a GitLab CE Omnibus package&lt;/a&gt; 安装 ，其他发行版可以点选对应版本，不再赘述。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;安装和配置依赖&lt;/h2&gt;

&lt;p&gt;如果需要安装 Postfix 来发送邮件，则需要在安装过程中选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;Internet Site&lt;/code&gt;。你也可以使用 Sendmail 之类的第三方发信服务或者使用自行配制的 SMTP 服务器。
除此以外，下列命令将会在防火墙中打开 HTTP(80) 和 SSH(22) 对应端口。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo yum install curl policycoreutils openssh-server openssh-clients
sudo systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;sshd
sudo systemctl start sshd
sudo yum install postfix
sudo systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;postfix
sudo systemctl start postfix
sudo firewall-cmd --permanent --add-service&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http
sudo systemctl reload firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;gitlab--1&quot;&gt;添加 Gitlab 源并安装&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
sudo yum install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个脚本会在源中添加 Gitlab-CE ，并自动执行&lt;code class=&quot;highlighter-rouge&quot;&gt;yum makecache&lt;/code&gt;，然后安装&lt;code class=&quot;highlighter-rouge&quot;&gt;gitlab-ce&lt;/code&gt;。由于源在国外，可能速度较慢，也可以手动添加来自 清华tuna 的源： https://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/ ， 链接中为各发行版下的教程，感谢 清华tuna 提供镜像。&lt;/p&gt;

&lt;h2 id=&quot;gitlab&quot;&gt;配置并启动 Gitlab&lt;/h2&gt;

&lt;p&gt;此时已经可以启动服务了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进行一长串复杂的启动流程之后， gitlab 就已经可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; 进行访问了。&lt;/p&gt;

&lt;h1 id=&quot;gitlab--2&quot;&gt;Gitlab 配置&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;修改域名&lt;/h2&gt;

&lt;p&gt;默认的配置文件保存在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/gitlab/gitlab.rb&lt;/code&gt; ，执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vim /etc/gitlab/gitlab.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;打开文件，并修改：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;external_url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://your.domain'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次执行&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可。&lt;/p&gt;

&lt;p&gt;有一定概率出现 502 错误，刷新浏览器或者再次更新配置即可。&lt;/p&gt;

&lt;h2 id=&quot;gitlab--3&quot;&gt;Gitlab 汉化&lt;/h2&gt;

&lt;p&gt;由于服务对象是广大师生，为了降低新手上手的难度，所有进行汉化也是非常有必要的。好在国内有人已经进行了这方面的工作，我们只需要共享其成果即可（欢迎向&lt;a href=&quot;https://gitlab.com/larryli/gitlab&quot;&gt;原项目&lt;/a&gt;提交高质量翻译）。&lt;/p&gt;

&lt;p&gt;首先确认版本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并确认当前汉化版本的 VERSION 是否相同，当前最新的汉化版本为 8.6 。
如果安装版本小于当前汉化版本，请先升级。如果安装版本大于当前汉化版本，请在本项目中提交新的 issue。
如果版本相同，首先在本地 clone 仓库。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# GitLab.com 仓库&lt;/span&gt;
git clone https://gitlab.com/larryli/gitlab.git

&lt;span class=&quot;c&quot;&gt;# 或 Coding.net 镜像&lt;/span&gt;
git clone https://git.coding.net/larryli/gitlab.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据我的测试， Coding.net 的镜像不完整，clone 之后无法 checkout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后比较汉化分支和原分支，导出 patch 用的 diff 文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 8.1 版本的汉化补丁&lt;/span&gt;
git diff origin/8-6-stable..8-6-zh &amp;gt; ../8.6.diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后上传 &lt;code class=&quot;highlighter-rouge&quot;&gt;8.6.diff&lt;/code&gt; 文件到服务器。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 停止 gitlab&lt;/span&gt;
sudo gitlab-ctl stop
sudo patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &amp;lt; 8.6.diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;确定没有 .rej 文件，重启 GitLab 即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果汉化中出现问题，请重新安装 GitLab（&lt;strong&gt;注意备份数据&lt;/strong&gt;）。&lt;/p&gt;

&lt;h1 id=&quot;gitlab--4&quot;&gt;Gitlab 运维&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;管理&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 启动所有 gitlab 组件：&lt;/span&gt;
sudo gitlab-ctl start

&lt;span class=&quot;c&quot;&gt;# 停止所有 gitlab 组件：&lt;/span&gt;
sudo gitlab-ctl stop

&lt;span class=&quot;c&quot;&gt;# 重启所有 gitlab 组件：&lt;/span&gt;
sudo gitlab-ctl restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;备份&lt;/h2&gt;

&lt;p&gt;备份GitLab repositories and GitLab metadata
在 crontab 中加入如下命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 2 * * * /usr/bin/gitlab-rake gitlab:backup:create
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;恢复&lt;/h2&gt;

&lt;p&gt;首先进入备份 gitlab 的目录，这个目录是配置文件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;gitlab_rails['backup_path']&lt;/code&gt;，默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/opt/gitlab/backups&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl stop unicorn
&lt;span class=&quot;c&quot;&gt;# ok: down: unicorn: 0s, normally up&lt;/span&gt;
sudo gitlab-ctl stop sidekiq
&lt;span class=&quot;c&quot;&gt;# ok: down: sidekiq: 0s, normally up&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后恢复数据，1406691018为备份文件的时间戳&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gitlab-rake gitlab:backup:restore &lt;span class=&quot;nv&quot;&gt;BACKUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1406691018
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;修改数据存储地址&lt;/h2&gt;

&lt;p&gt;默认情况下，gitlab 将数据存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/opt/gitlab/git-data&lt;/code&gt;目录下，受限于分区情况&amp;amp;方便管理，我们需要将数据迁移到别的目录下。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;无需数据迁移&lt;/h3&gt;

&lt;p&gt;如果还没有投入使用，则可以直接在配置文件中添加：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;git_data_dir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/path/to/git-data&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以生效了。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;进行数据迁移&lt;/h3&gt;

&lt;p&gt;如果已经有数据了，则需要进行迁移。&lt;/p&gt;

&lt;p&gt;首先需要暂停服务，避免用户在迁移期间读写数据：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gitlab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后使用rsync数据进行迁移：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意前一个地址不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;，后一个地址需要&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;，且只需要迁移&lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt;目录即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rsync -av /var/opt/gitlab/git-data/repositories /path/to/git-data/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后运行配置工具以更新并重启服务：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;官网文档是先更新配置再启动服务，但我在使用中发现先更新配置会提示无法连接上服务器，出现这种问题时可以先启动服务再更新配置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
sudo gitlab-ctl start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后不要忘了在网页端确认数据的地址是否正确。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于权限问题
在使用中，我一开始创建了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;gitlabhq&lt;/code&gt;用户并创建了一个文件夹，然后修改地址，服务正常启动后提示500。
后来使用&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;账户在&lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt;下直接创建文件夹解决了这个问题。
如果有遇到类似问题的，可以尝试用&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;创建目录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ipv6&quot;&gt;监听IPv6&lt;/h2&gt;

&lt;p&gt;教育网拥有得天独厚的IPv6资源，所以为我们的gitlab服务添加IPv6支持很有必要。&lt;/p&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;文件中的：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# nginx['listen_addresses'] = ['*']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'listen_addresses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[::]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以通过IPv6访问了。&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/downloads/&quot;&gt;Gitlab 下载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitlab.com/larryli/gitlab/wikis/home&quot;&gt;GitLab Community Edition · Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/crontab.html&quot;&gt;crontab 定时任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/raketasks/backup_restore.md&quot;&gt;Backup restore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/configuration.md#storing-git-data-in-an-alternative-directory&quot;&gt;Storing Git data in an alternative directory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-10&quot;&gt;更新日志&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;2016年04月14日 首次发布&lt;/li&gt;
  &lt;li&gt;2016年04月18日 新增数据迁移&amp;amp;监听IPv6配置&lt;/li&gt;
&lt;/ul&gt;</content><category term="运维" /><category term="CUGBLUG" /><category term="Gitlab" /><summary type="html">起因
在跟网络中心的老师沟通成立镜像站的相关事宜的时候，意外地接下来搭建一套校内的 Git 服务的任务。
@怡红公子 曾经搭建过一套类似的服务，但由于服务器端没有开启 VT 虚拟化导致不能安装 64 位的操作系统，再加上 Gitlab 不提供 32 位的安装包，所以长期以来怡红公子一直都是自行编译并配置 Gitlab 。考虑到后续维护的方便，我们决定趁着这个机会使用另一台支持安装 64 位操作系统的服务器，一劳永逸地解决这个问题。
我们的服务器环境是 CentOS 7.2 64bit ，以下所有操作均以此为基准。</summary></entry><entry><title type="html">docopt——好用的Python命令行参数解释器</title><link href="https://xuanwo.org/2016/04/04/docopt-intro" rel="alternate" type="text/html" title="docopt——好用的Python命令行参数解释器" /><published>2016-04-04T21:39:00+08:00</published><updated>2016-04-04T21:39:00+08:00</updated><id>https://xuanwo.org/2016/04/04/docopt-intro</id><content type="html" xml:base="https://xuanwo.org/2016/04/04/docopt-intro">&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Xuanwo/qingchat&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Qingchat&lt;/code&gt;&lt;/a&gt; 使用的命令行参数解释器是 &lt;a href=&quot;http://docopt.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docopt&lt;/code&gt;&lt;/a&gt;，用下来感觉非常棒，所以决定介绍一下这个库。（&lt;em&gt;奉劝各位看官，珍爱生命，远离argparse。&lt;/em&gt;）&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;section-1&quot;&gt;介绍&lt;/h1&gt;
&lt;p&gt;docopt 本质上是在 Python 中引入了一种针对命令行参数的形式语言，在代码的最开头使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&quot;&lt;/code&gt;文档注释的形式写出符合要求的文档，就会自动生成对应的parse，体验非常赞。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;用法&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;样例&lt;/h2&gt;

&lt;p&gt;docopt的使用非常简单，以Qingchat为例，你只需要在代码最开头加入：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Qingchat CLI

Usage:
  qingchat config ip &amp;lt;ip&amp;gt;
  qingchat config port &amp;lt;port&amp;gt;
  qingchat config login
  qingchat group list
  qingchat group choose &amp;lt;group_name&amp;gt;...
  qingchat group clean
  qingchat group send -t &amp;lt;content&amp;gt;
  qingchat group send -i &amp;lt;media&amp;gt;
  qingchat group send -f &amp;lt;file&amp;gt; [&amp;lt;delaytime&amp;gt;]

Options:
  -h --help     Show this screen.
  -v --version     Show version.
&quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在执行代码中加入：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Qingchat 0.3.2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就会在你的程序中导入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments&lt;/code&gt;字典，这个字典中的内容形如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'-f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'-i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'-t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&amp;lt;content&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&amp;lt;file&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&amp;lt;group_name&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&amp;lt;ip&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&amp;lt;media&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&amp;lt;port&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'choose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'clean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'ip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'port'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'send'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样应该就能很容易看出来，我们在文档中写的每一个短语，都被转化为一个对应的类型。只要直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments['xxx']&lt;/code&gt;就可以判断或者使用对应的值，从而实现对应的功能。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;详解&lt;/h2&gt;

&lt;p&gt;前面我们举了一个例子，下面我们来详细介绍一下如何完成一个符合 &lt;code class=&quot;highlighter-rouge&quot;&gt;docopt&lt;/code&gt; 要求的注释文档。&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;所有出现在&lt;code class=&quot;highlighter-rouge&quot;&gt;usage:&lt;/code&gt;（区分大小写）和一个空行之间的文本都会被识别为一个命令组合，&lt;code class=&quot;highlighter-rouge&quot;&gt;usage&lt;/code&gt;后的第一个字母将会被识别为这个程序的名字，所有命令组合的每一个部分（空格分隔）都会成为字典中的一个key。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;参数&lt;/h4&gt;

&lt;p&gt;形如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;argument&amp;gt;&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;ARGUMENT&lt;/code&gt; 的文本将会被识别为参数。
在转化后的字典中的取值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-6&quot;&gt;选项&lt;/h4&gt;

&lt;p&gt;形如 &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;--option&lt;/code&gt; 的文本将会被识别为选项。
在转化后的字典中的取值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;短选项可以组合起来，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;-abc&lt;/code&gt;等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;-a -b -c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;长选项需要的参数需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 或者空格来分隔，&lt;code class=&quot;highlighter-rouge&quot;&gt;--input=ARG&lt;/code&gt; 等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;--input ARG&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;短选项可以不需要空格， &lt;code class=&quot;highlighter-rouge&quot;&gt;-f FILE&lt;/code&gt; 等价于 &lt;code class=&quot;highlighter-rouge&quot;&gt;-fFILE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;命令&lt;/h4&gt;

&lt;p&gt;其他不满足 &lt;code class=&quot;highlighter-rouge&quot;&gt;--options&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;arguments&amp;gt;&lt;/code&gt; 的文本将会被识别为（子）命令。
在转化后的字典中取值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;可选项&lt;/h4&gt;

&lt;p&gt;形如 &lt;code class=&quot;highlighter-rouge&quot;&gt;[optional elements]&lt;/code&gt; 的文本是可选项。
&lt;code class=&quot;highlighter-rouge&quot;&gt;elements&lt;/code&gt;包括上述的三种类型：参数，选项以及命令。&lt;/p&gt;

&lt;p&gt;在相同或者不同的括号中都是一样的：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等价于&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-9&quot;&gt;必填项&lt;/h4&gt;

&lt;p&gt;形如 &lt;code class=&quot;highlighter-rouge&quot;&gt;(required elements)&lt;/code&gt; 的文本是必填项。
上述三种元素默认都是必填项，&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;符号用在一些比较特殊的情形下，比如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-10&quot;&gt;选择项&lt;/h4&gt;

&lt;p&gt;形如 &lt;code class=&quot;highlighter-rouge&quot;&gt;element|another&lt;/code&gt; 的文本是选择项，你可以从中选择一个值。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-11&quot;&gt;列表项&lt;/h4&gt;

&lt;p&gt;形如 &lt;code class=&quot;highlighter-rouge&quot;&gt;element...&lt;/code&gt; 的文本是列表项，你可以输入多个参数。&lt;/p&gt;

&lt;p&gt;比如说：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_program&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后你可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;arguments['&amp;lt;file&amp;gt;']&lt;/code&gt; 来访问这个列表。&lt;/p&gt;

&lt;h3 id=&quot;option&quot;&gt;Option&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt; 部分用于指定某些特殊情形，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将某个短参数与长参数关联起来，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;-i &amp;lt;file&amp;gt;, --input &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;某个选项有一个参数&lt;/li&gt;
  &lt;li&gt;选项的默认值，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;--coefficient=K  The K coefficient [default: 2.95]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-12&quot;&gt;校验&lt;/h3&gt;

&lt;p&gt;如果对自己完成的文档有疑问，可以使用&lt;a href=&quot;http://try.docopt.org/&quot;&gt;在线工具&lt;/a&gt;进行校验。&lt;/p&gt;

&lt;h1 id=&quot;section-13&quot;&gt;更新日志&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2016年04月04日 首次发布&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python" /><category term="qingchat" /><summary type="html">前言</summary></entry></feed>
